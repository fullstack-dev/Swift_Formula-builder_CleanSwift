//
//  FBSpeciesViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/21/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol FBSpeciesViewControllerDelegate: class {
    func selectedValues(_ values: [String], title: String)
}

protocol FBSpeciesViewControllerInput
{
    func displaySomething(viewModel: FBSpecies.Something.ViewModel)
}

protocol FBSpeciesViewControllerOutput
{
    func doSomething(request: FBSpecies.Something.Request)
}

class FBSpeciesViewController: UIViewController, FBSpeciesViewControllerInput
{
    var output: FBSpeciesViewControllerOutput!
    var router: FBSpeciesRouter!
    
    var selectedValues = [String]()
    var allValues = [String]()
    
    var filteredValues = [String]()
    
    weak var delegate: FBSpeciesViewControllerDelegate?
    
    @IBOutlet weak var chooseLabel: UILabel!
    @IBOutlet weak var numberLabel: FBNumberLabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        FBSpeciesConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        filteredValues = allValues
        
        tableView.allowsMultipleSelection = true
        
        updateNumberLabel()
        
        chooseLabel.text = "CHOOSE \(title!.capitalized)"
        
        setupInputAccessoryViewsForSearchBar()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        delegate?.selectedValues(selectedValues, title: title!)
    }
    
    func updateNumberLabel() {
        numberLabel.text = "\(selectedValues.count)"
    }
    
    func displaySomething(viewModel: FBSpecies.Something.ViewModel) {}
    
    func setupInputAccessoryViewsForSearchBar() {
        let keyboardDismissBtn : UIBarButtonItem = UIBarButtonItem(image: UIImage(named: "keyboardDismiss") , style: .done, target: self, action: #selector(keyboardDismissBtnTapped(_:)))
        let flexibleSpace: UIBarButtonItem = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        
        let toolbar : UIToolbar = UIToolbar(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 44))
        toolbar.setItems([flexibleSpace, keyboardDismissBtn], animated: true)
        
        searchBar.inputAccessoryView = toolbar
    }
    
    func keyboardDismissBtnTapped(_ sender: Any) {
        self.view.endEditing(true)
    }
}

// MARK:

extension FBSpeciesViewController: UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
//        return allValues.count
        return filteredValues.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: "cell")
        if cell == nil {
            cell = UITableViewCell.init(style: .default, reuseIdentifier: "cell")
            cell?.selectionStyle = .none
        }
        
//        let value = allValues[indexPath.row]
        let value = filteredValues[indexPath.row]
        cell?.textLabel?.text = value
        
        if selectedValues.contains(value) {
            cell?.accessoryType = .checkmark
        } else {
            cell?.accessoryType = .none
        }
        
        return cell!
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
//        let value = allValues[indexPath.row]
        let value = filteredValues[indexPath.row]
        if selectedValues.contains(value) == false {
            selectedValues.append(value)
        } else {
            selectedValues.remove(at: selectedValues.index(of: value)!)
        }
        
        tableView.reloadData()
        
        updateNumberLabel()
    }
    
    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
        
//        let value = allValues[indexPath.row]
        let value = filteredValues[indexPath.row]
        if selectedValues.contains(value) == false {
            selectedValues.append(value)
        } else {
            selectedValues.remove(at: selectedValues.index(of: value)!)
        }
        
        tableView.reloadData()
        
        updateNumberLabel()
    }
    
    // This method updates filteredData based on the text in the Search Box
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        // When there is no text, filteredData is the same as the original data
        // When user has entered text into the search box
        // Use the filter method to iterate over all items in the data array
        // For each item, return true if the item should be included and false if the
        // item should NOT be included
        filteredValues = searchText.isEmpty ? allValues : allValues.filter { (item: String) -> Bool in
            // If dataItem matches the searchText, return true to include it
            return item.range(of: searchText, options: .caseInsensitive, range: nil, locale: nil) != nil
        }
        
        tableView.reloadData()
        
        updateNumberLabel()
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        
    }
    
}










