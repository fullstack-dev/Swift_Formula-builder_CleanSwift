//
//  FBCategoriesListViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/10/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FormulaBuilderCore

protocol FBCategoriesListViewControllerInput {
    func displayFetchedCategories(viewModel: FBCategoriesList.FetchCategories.ViewModel)
    func displayFetchedFormulas(viewModel: FBFormulaSearch.FetchFormulas.ViewModel)
    func displayFetchedHerbs(viewModel: FBHerbSearch.FetchHerbs.ViewModel)
}

protocol FBCategoriesListViewControllerOutput {
    func fetchCategories(_ request: FBCategoriesList.FetchCategories.Request)
    func fetchAllHerbs()
    func fetchAllFormulas()
}

class FBCategoriesListViewController: UIViewController  {
    var output: FBCategoriesListViewControllerOutput!
    var router: FBCategoriesListRouter!
    
    var type: CategoryType!
    var categories: [FBCategoriesList.FetchCategories.ViewModel.DisplayedCategory] = []
    
    @IBOutlet weak var tableView: UITableView!
    
    override func awakeFromNib() {
        super.awakeFromNib()
        FBCategoriesListConfigurator.sharedInstance.configure(viewController: self)
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setTitle()
        configureTableView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        fetchCategories()
        if (self.type == .herb) {
            fetchAllHerbs()
        } else {
            fetchAllFormulas()
        }
    }
    
    func configureTableView() {
        tableView.register(UINib(nibName: "FBCategoryListCell", bundle: nil), forCellReuseIdentifier: kCell)
    }
    
    @IBAction func addButtonClicked(_ sender: UIBarButtonItem) {
        
        var controllerName = ""
        
        if type == .herb {
            controllerName = "FBHerbSearchViewController"
        } else {
            controllerName = "FBFormulaSearchViewController"
        }
        
        let viewController = mainStoryboard.instantiateViewController(withIdentifier: controllerName)
        (viewController as! FBSearchViewController).allowsMultipleSelection = true
        navigationController?.pushViewController(viewController, animated: true)
    }
    
    func setTitle() {
        title = "Herb Categories"
        if type == CategoryType.formula {
            title = "Formula Categories"
        }
    }
    
    func fetchCategories() {
        let request = FBCategoriesList.FetchCategories.Request(type: type)
        output.fetchCategories(request)
    }
    func fetchAllHerbs()
    {
        output.fetchAllHerbs()
    }
    
    func fetchAllFormulas()
    {
        output.fetchAllFormulas()
    }
  
    func showDeleteWarning(name: String, id: String) {
        let alert = UIAlertController(title: "Delete Category", message: "This will delete \(name),\nare you sure?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        alert.addAction(UIAlertAction.init(title: "Delete", style: .destructive, handler: { _ in
            
            FBCoreWorker.shared.deleteCategory(id: id, type: self.type, completion: { error in
                if error == nil {
                    self.fetchCategories()
                } else {
                    FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                }
            })
        }))
        present(alert, animated: true, completion: nil)
    }
}

// MARK: FBCategoriesListViewControllerInput

extension FBCategoriesListViewController: FBCategoriesListViewControllerInput {
    func displayFetchedHerbs(viewModel: FBHerbSearch.FetchHerbs.ViewModel) {
        let allherbs = viewModel.displayedHerbs
        var category = FBCategoriesList.FetchCategories.ViewModel.DisplayedCategory(id: "", name: "All Herbs", itemIDs: [])
        for herb in allherbs
        {
            category.itemIDs.append(herb.id)
        }
        categories.insert(category, at: 0)
        tableView.reloadData()
    }

    func displayFetchedFormulas(viewModel: FBFormulaSearch.FetchFormulas.ViewModel) {
        let allFormulas = viewModel.displayedFormulas
        var category = FBCategoriesList.FetchCategories.ViewModel.DisplayedCategory(id: "", name: "All Formulas", itemIDs: [])
        for formula in allFormulas
        {
            category.itemIDs.append(formula.id)
        }
        categories.insert(category, at: 0)
        tableView.reloadData()
    }

    
    func displayFetchedCategories(viewModel: FBCategoriesList.FetchCategories.ViewModel) {
        categories = viewModel.displayedCategories

        tableView.reloadData()
    }
}

// MARK: UITableViewDataSource

extension FBCategoriesListViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return categories.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: kCell) as! FBCategoryListCell
        
        let category = categories[indexPath.row]
        cell.nameLabel.text = category.name
        cell.numberLabel.text = "\(category.itemIDs.count)"
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        let category = categories[indexPath.row]
        if category.name == "All Formulas" || category.name == "All Herbs"{
            return false
        } else {
            return true
        }
    }
}

// MARK: UITableViewDelegate

extension FBCategoriesListViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let category = categories[indexPath.row]
        
        if type == CategoryType.herb {
            let herbSearchViewController = mainStoryboard.instantiateViewController(withIdentifier: "FBHerbSearchViewController") as! FBHerbSearchViewController
            herbSearchViewController.category = category
            navigationController?.pushViewController(herbSearchViewController, animated: true)
        } else {
            let formulaSearchViewController = mainStoryboard.instantiateViewController(withIdentifier: "FBFormulaSearchViewController") as! FBFormulaSearchViewController
            formulaSearchViewController.category = category
            navigationController?.pushViewController(formulaSearchViewController, animated: true)
        }
    }

    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {

        let deleteButton = UITableViewRowAction.init(style: .destructive, title: "Delete") { (delete, indexPath) in
            let category = self.categories[indexPath.row]
            self.showDeleteWarning(name: category.name, id: category.id)
        }
        
        return [deleteButton]
    }
    
}

