//
//  FBChannelsViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/20/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FormulaBuilderCore
import SnapKit

protocol FBChannelsViewControllerInput {
    func displayFetchedChannels(viewModel: FBChannels.FetchChannels.ViewModel)
}

protocol FBChannelsViewControllerOutput {
    func fetchChannels(request: FBChannels.FetchChannels.Request)
    var advancedSearchViewController: FBAdvancedSearchViewController? { get set }
    var profileViewController: FBProfileViewController? { get set }
}

class FBChannelsViewController: UIViewController {
    var output: FBChannelsViewControllerOutput!
    var router: FBChannelsRouter!
    
    var displayedChannels: [FBChannel] = []
    var selectedChannelIDs = [String]()
    
    var selectedChannels: [FBChannel] = []
    
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var chooseLabel: UILabel!
    @IBOutlet weak var scroller: UIScrollView!
    
    @IBOutlet weak var numberLabel: FBNumberLabel!
    override func awakeFromNib() {
        super.awakeFromNib()
        FBChannelsConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        fetchChannels()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    func scrollViewDidScroll(scrollView: UIScrollView) {
        if scrollView.contentOffset.x>0 {
            scrollView.contentOffset.x = 0
        }
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        
        coordinator.animate(alongsideTransition: { _ in
            
        }, completion: nil)
    }
    
    func setupChannelView(channels : [FBChannel]) {
        
        if (channels.count > 0) {
            let tagView : SKTagView = SKTagView()
            tagView.preferredMaxLayoutWidth = UIScreen.main.bounds.width
            tagView.padding = UIEdgeInsetsMake(8, 6, 8, 6)
            tagView.interitemSpacing = 8
            tagView.lineSpacing = 8
            
            tagView.removeAllTags()
            
            for channel in channels {
                let tag : SKTag = SKTag(text: channel.englishName, chineseText: channel.chineseName, iconName: channel.iconName)
                tag.textColor = FBColor.hexColor_4A4A4A()
                tag.chineseTextColor = FBColor.hexColor_B4B4B4()
                
                tag.fontSize = 15
                tag.chineeseTextFontSize = 15
                
                tag.font = FBFont.SFUIText_Regalur17()
                tag.chineseTextfont = FBFont.PingFangSC_Regular17()
                
                tag.padding = UIEdgeInsetsMake(5, 20, 5, 15)
                tag.bgImg = UIImage(color: FBColor.hexColor_F7F7F7())
                tag.bgColor = FBColor.hexColor_9B9B9B()
                tag.cornerRadius = 5
                tag.enable = true
                tag.selected = self.selectedChannelIDs.contains(channel.id)
                
                tagView.addTag(tag)
            }
            
            tagView.didTapTagAtIndex = { (index : UInt) in
                if (self.selectedChannelIDs.contains(channels[Int(index)].id)) {
                    let i : Int = self.selectedChannelIDs.index(of: channels[Int(index)].id)!
                    self.selectedChannelIDs.remove(at: i)
                    self.selectedChannels.remove(at: i)
                } else {
                    self.selectedChannelIDs.append(channels[Int(index)].id);
                    self.selectedChannels.append(channels[Int(index)])
                }
                self.updateNumberLabel()
            }
            
            containerView.addSubview(tagView)
            tagView.snp.makeConstraints({ (maker) in
                let superView : UIView = self.containerView
                maker.top.equalTo(superView.snp.top)
                maker.left.equalTo(superView.snp.left)
                maker.right.equalTo(superView.snp.right)
            })
            
            self.updateNumberLabel()
        }

    }
    
    func fetchChannels() {
        let request = FBChannels.FetchChannels.Request()
        output.fetchChannels(request: request)
        print("fetch chnnels : ",output.fetchChannels(request: FBChannels.FetchChannels.Request()))
    }
    
    func updateNumberLabel() {
        numberLabel.text = "\(selectedChannelIDs.count)"
    }

    @IBAction func plusBtnTapped(_ sender: Any) {
        guard self.output.profileViewController != nil else {
            return
        }
        
        self.output.profileViewController?.herb?.channels = selectedChannels
        self.navigationController?.popViewController(animated: true)
    }
}

// MARK: FBChannelsViewControllerInput

extension FBChannelsViewController: FBChannelsViewControllerInput {
    
    func displayFetchedChannels(viewModel: FBChannels.FetchChannels.ViewModel){
        displayedChannels = viewModel.displayedChannels
        numberLabel.text = "0"
        setupChannelView(channels: displayedChannels)
    }
}
