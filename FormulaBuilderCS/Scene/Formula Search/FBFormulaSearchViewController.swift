//
//  FBFormulaSearchViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/3/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FormulaBuilderCore

protocol FBFormulaSearchViewControllerInput {
    func displayFetchedFormulas(_ viewModel: FBFormulaSearch.FetchFormulas.ViewModel)
}

protocol FBFormulaSearchViewControllerOutput {
    func fetchFormulas(_ request: FBFormulaSearch.FetchFormulas.Request)
    var homeViewController: FBHomeViewController? { set get }
    var herbSearchViewController: FBHerbSearchViewController? { get set }
    var recentSearchViewController: FBRecentSearchesViewController? { set get }
    var formulas: [FBFormula]? { get }
}

class FBFormulaSearchViewController: FBSearchViewController {
    var output: FBFormulaSearchViewControllerOutput!
    var router: FBFormulaSearchRouter!
    
    var allFormulas: [DisplayedFormula] = []
    var categoryFormulas = [DisplayedFormula]()
    var favoritedFormulas = [DisplayedFormula]()
    var displayedFormulas: [DisplayedFormula] = []
    var advancedSearchResults = [DisplayedFormula]()
    var originalHerbsCount: Int = 0
    var selectedFormulas = [DisplayedFormula]()
    var searchResults = [DisplayedFormula]()
    var herbsToCompare = [DisplayedHerb]()
    
    var recents = [[String: [String]]]()
    
    var profilePageType: ProfileViewType?
    
    @IBOutlet weak var recentTableView: UITableView!
    @IBOutlet weak var searchButton: UIButton!
    @IBOutlet weak var headerLabelWidth: NSLayoutConstraint!
    //    @IBOutlet weak var rightBarButton: UIBarButtonItem?
    @IBOutlet public weak var header: UIView!
    
    var shouldNotShowReadyOnly: Bool = false
    
    override func awakeFromNib() {
        super.awakeFromNib()
        
        FBFormulaSearchConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchFormulas()
    }
    
    func configure() {
        
        if allowsMultipleSelection {
            
        }
        
        if category != nil {
            
            rightBarButton?.title = "Edit"
            nameTextField?.isEnabled = false
            nameTextField?.text = category!.name
            
            if category!.name == "All Formulas" {
                rightBarButton?.title = ""
                rightBarButton?.isEnabled = false
            }
        }
        
        if title == kSearchResults {
            rightBarButton?.title = ""
            rightBarButton?.isEnabled = false
        } else if title != nil {
            if title!.contains("Search Results") {
                rightBarButton?.title = ""
                rightBarButton?.isEnabled = false
            }
        }
    }
    
    func fetchFormulas() {
        
        if needFetch {
            let request = FBFormulaSearch.FetchFormulas.Request()
            output.fetchFormulas(request)
        }
    }
    
    func fetchRecents() {
        
        searchBarBackToNormal()
        searchButton.isEnabled = false
        
        recents.removeAll()
        recentTableView.superview?.bringSubview(toFront: recentTableView)
        
        store.fetchRecentRecords(withType: .formula) { recents in
            
            var dict = [String: [String]]()
            var recoreIDs = [String]()
            
            for recent in recents {
                
                let date0 = Date(timeIntervalSinceReferenceDate: recent.timestamp)
                let dateString = FBHelper.formattedDateString(date0)
                
                if self.recents.isEmpty {
                    recoreIDs.append(recent.recordID)
                    dict[dateString] = recoreIDs
                    self.recents.append(dict)
                    
                } else {
                    let lastDict = self.recents.last!
                    if lastDict.keys.first == dateString {
                        recoreIDs.append(recent.recordID)
                        dict[dateString] = recoreIDs
                        self.recents.removeLast()
                        self.recents.append(dict)
                    } else {
                        dict.removeAll()
                        recoreIDs.removeAll()
                        
                        recoreIDs.append(recent.recordID)
                        dict[dateString] = recoreIDs
                        self.recents.append(dict)
                    }
                }
            }
            
            self.recentTableView.reloadData()
            
            self.numberLabel.text = "\(self.recents.count)"
        }
        
    }
    
    fileprivate func updateNumberLabel() {
        if allowsMultipleSelection {
            numberLabel.text = "\(selectedFormulas.count)"
        } else {
            numberLabel.text = "\(displayedFormulas.count)"
        }
    }
    
    func compareHerb(_ herb: DisplayedHerb) {
        
        if herbsToCompare.contains(herb) {
            herbsToCompare.remove(at: herbsToCompare.index(of: herb)!)
        } else {
            herbsToCompare.append(herb)
        }
        
        for formula in allFormulas {
            formula.containsInComparedHerb = false
        }
        
        if herbsToCompare.isEmpty {
            displayedFormulas = allFormulas
            
            refreshUI()
            
            return
        }
        
        var ids = [String]()
        var sortFormulas = [DisplayedFormula]()
        
        for formula in allFormulas {
            if formula.herbIDs.contains(herbsToCompare[0].id)
            {
                sortFormulas.append(formula)
            }
        }
        for formula in sortFormulas
        {
            var flag = true
            for herb in herbsToCompare
            {
                if !formula.herbIDs.contains(herb.id)
                {
                    flag = false
                    break
                }
            }
            if flag
            {
                ids.append(formula.id)
            }
        }
        
        displayedFormulas.removeAll()
        for formula in allFormulas
        {
            if ids.contains(formula.id)
            {
                displayedFormulas.append(formula)
                if selectedFormulas.contains(formula)
                {
                    formula.containsInComparedHerb = true
                }
            }
        }
        sortComparedHerbFormulas()
        
        self.tableView.reloadData()
        self.updateNumberLabel()
    }
    
    fileprivate func sortComparedHerbFormulas() {
        var addToHerbFormulas: [DisplayedFormula] = []
        var otherFormulas: [DisplayedFormula] = []
        
        // name alphabetically
        let sortedFormulas = displayedFormulas.sorted(by: { (h0, h1) -> Bool in
            h0.name < h1.name
        })
        
        for formula in sortedFormulas {
            if formula.containsInComparedHerb{
                addToHerbFormulas.append(formula)
            } else {
                otherFormulas.append(formula)
            }
        }
        
        displayedFormulas = addToHerbFormulas + otherFormulas
    }
    
    fileprivate func sortDisplayedFormulas() {
        
        var aheads: [DisplayedFormula] = [] // include formulas to compare
        var locked = [DisplayedFormula]()
        var behinds: [DisplayedFormula] = []
        
        // name alphabetically
        let sortedFormulas = displayedFormulas.sorted(by: { (h0, h1) -> Bool in
            h0.name < h1.name
        })
        
        for formula in sortedFormulas {
            if allowsMultipleSelection {
                if formula.isSelected {
                    aheads.append(formula)
                } else {
                    behinds.append(formula)
                }
            } else {
                if formula.isCompared {
                    aheads.append(formula)
                } else if formula.isLocked {
                    locked.append(formula)
                } else {
                    behinds.append(formula)
                }
            }
        }
        
        displayedFormulas = aheads + locked + behinds
    }
    
    func getDisplayedFormulas() -> [DisplayedFormula] {
        if title == kSearchResults{
            return advancedSearchResults
        } else if title != nil {
            if title!.contains("Search Results") {
                return advancedSearchResults
            } else {
                if category != nil && allowsMultipleSelection == false {
                    return categoryFormulas
                } else if filter == .all {
                    return allFormulas
                } else {
                    return favoritedFormulas
                }
            }
        } else if category != nil && allowsMultipleSelection == false {
            return categoryFormulas
        } else if filter == .all {
            if (shouldNotShowReadyOnly) {
                return allFormulas.filter({$0.readOnly == false})
            } else {
                return allFormulas
            }
        } else {
            return favoritedFormulas
        }
    }
    
    fileprivate func refreshUI() {
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.updateNumberLabel()
        }
    }
    
    func refereshUIWithHerbSearchResults(_ herbIDs: [String]) {
        if herbIDs.count == originalHerbsCount && originalHerbsCount > 300 {
            sortDisplayedFormulas()
            for formula in displayedFormulas {
                formula.number = formula.herbIDs.count
            }
        } else {
            for formula in displayedFormulas {
                formula.number = 0
                
                for herbID in formula.herbIDs {
                    if herbIDs.contains(herbID) {
                        formula.number += 1
                    }
                }
            }
        }
        
        var a = [DisplayedFormula]()
        var b = [DisplayedFormula]()
        var c = [DisplayedFormula]()
        for formula in displayedFormulas {
            if formula.isLocked {
                a.append(formula)
            } else if formula.number > 0 {
                b.append(formula)
            } else {
                c.append(formula)
            }
        }
        
        displayedFormulas.removeAll()
        
        displayedFormulas = a + b + c
        
        refreshUI()
    }
    
    func refereshUIWithFilter(_ filter: FetchFilter) {
        
        recentTableView.superview?.sendSubview(toBack: recentTableView)
        searchButton.isEnabled = true
        
//        if self.filter != filter {
            self.filter = filter
            needFetch = true
            
            fetchFormulas()
//        }
    }
    
    func clearFormulas() {
        for formula in allFormulas {
            if (formula.isFavorited) {
                FBCoreWorker.shared.favoriteStatusChanged(with: formula.id, type: "Formula")
            }
        }
    
        needFetch = true
        fetchFormulas()
    }
    
    func searchingHerb() {
        searchBarBackToNormal()
    }
    
    fileprivate func searchBarBackToNormal() {
        searchButton.isHidden = false
        searchBar.isHidden = true
        headerLabelWidth.constant = 60.5
    }
    
    override func dismissKeyboard() {
        super.dismissKeyboard()
        
        searchBarBackToNormal()
    }
    
    // MARK: Actions
    
    @IBAction func searchButtonClicked(_ sender: UIButton) {
        sender.isHidden = true
        searchBar.isHidden = false
        headerLabelWidth.constant = 0
        
        if output.homeViewController == nil {
            self.searchBar.becomeFirstResponder()
        } else {
            output.homeViewController?.searchForHerb(false, {
                self.searchBar.becomeFirstResponder()
            })
        }
    }
    
    @IBAction func rightBarButtonClicked(_ sender: UIBarButtonItem) {
        
        if rightBarButton?.title == "Save" {
            saveCategory()
        } else {
            editCategory()
        }
    }
    
    func saveCategory() {
        if preCheckFail() == false {
            
            if category == nil {
                createNewCategory()
            } else {
                updateCategory()
            }
            
        }
    }
    
    func updateCategory() {
        nameTextField?.resignFirstResponder()
        category!.name = nameTextField!.text!
        category!.itemIDs = itemIDs
        
        FBCoreWorker.shared.updateCategory(category: category!, type: .formula) { displayedCategory, error in
            
            self.category = displayedCategory
            
            self.categoryFormulas.removeAll()
            for formula in self.allFormulas {
                if displayedCategory!.itemIDs.contains(formula.id) {
                    self.categoryFormulas.append(formula)
                }
            }
            
            if error == nil {
                self.rightBarButton?.title = "Edit"
                self.nameTextField?.isEnabled = false
                self.displayedFormulas = self.selectedFormulas
                self.allowsMultipleSelection = false
                
                for formula in self.selectedFormulas {
                    formula.isSelected = false
                }
                
                self.refreshUI()
            } else {
                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
            }
        }
    }
    
    func createNewCategory() {
        
        FBCoreWorker.shared.createCategory(name: nameTextField!.text!, itemIDs: itemIDs, type: .formula) { (displayedCategory, error) in
            
            self.category = displayedCategory
            
            self.categoryFormulas.removeAll()
            for formula in self.allFormulas {
                if displayedCategory!.itemIDs.contains(formula.id) {
                    self.categoryFormulas.append(formula)
                }
            }
            
            if error == nil {
                self.rightBarButton?.title = "Edit"
                self.nameTextField?.isEnabled = false
                self.displayedFormulas = self.selectedFormulas
                self.allowsMultipleSelection = false
                
                for formula in self.selectedFormulas {
                    formula.isSelected = false
                }
                
                self.refreshUI()
            } else {
                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
            }
        }
    }
    
    func duplicateCategory () {
        
        FBCoreWorker.shared.createCategory(name: self.category!.name + " Copy", itemIDs: itemIDs, type: .formula) { (displayedCategory, error) in
            
            self.category = displayedCategory
            
            if error == nil {
                let alert = UIAlertController.init(title: "Duplicate Succeed", message: nil, preferredStyle: .alert)
                alert.addAction(UIAlertAction.init(title: "OK", style: .default, handler: nil))
                self.present(alert, animated: true, completion: nil)
            } else {
                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
            }
        }
    }
    
    func editCategory() {
        view.endEditing(true)
        
        let alert = UIAlertController.init(title: nil, message: nil, preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction.init(title: "Cancel", style: .cancel, handler: nil))
        alert.addAction(UIAlertAction.init(title: "Edit Title", style: .default, handler: { action in
            self.nameTextField?.isEnabled = true
            self.nameTextField?.becomeFirstResponder()
            self.rightBarButton?.title = "Save"
        }))
        alert.addAction(UIAlertAction.init(title: "Add Formula", style: .default, handler: { action in
            self.displayedFormulas = self.allFormulas
            
            for formula in self.displayedFormulas {
                if self.selectedFormulas.contains(formula) {
                    formula.isSelected = true
                }
            }
            
            self.allowsMultipleSelection = true
            
            self.sortDisplayedFormulas()
            
            self.refreshUI()
            
            self.rightBarButton?.title = "Save"
        }))
        alert.addAction(UIAlertAction.init(title: "Duplicate", style: .default, handler: { action in
            self.duplicateCategory()
        }))
        alert.addAction(UIAlertAction.init(title: "Delete Category", style: .destructive, handler: { action in
            self.showDeleteWarning(name: self.category!.name, id: self.category!.id, indexPath: nil)
        }))
        
        present(alert, animated: true, completion: nil)
    }
    
    func showDeleteWarning(name: String, id: String, indexPath: IndexPath?) {
        var title = "Delete Category"
        if indexPath != nil {
            title = "Delete Formula"
        }
        let alert = UIAlertController(title: title, message: "This will delete \(name),\nare you sure?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        alert.addAction(UIAlertAction.init(title: "Delete", style: .destructive, handler: { _ in
            if indexPath == nil {
                FBCoreWorker.shared.deleteCategory(id: id, type: .formula, completion: { error in
                    if error == nil {
                        let _ = self.navigationController?.popViewController(animated: true)
                    }
                })
            } else {
                
                self.category!.itemIDs.remove(at: self.category!.itemIDs.index(of: id)!)
                
                FBCoreWorker.shared.updateCategory(category: self.category!, type: .formula, completion: { (category, error) in
                    self.category = category
                    self.displayedFormulas.remove(at: indexPath!.row)
                    self.refreshUI()
                })
            }
        }))
        present(alert, animated: true, completion: nil)
    }
}

// MARK: FBFormulaSearchViewControllerInput

extension FBFormulaSearchViewController: FBFormulaSearchViewControllerInput {
    
    func displayFetchedFormulas(_ viewModel: FBFormulaSearch.FetchFormulas.ViewModel) {
        allFormulas = viewModel.displayedFormulas
        
        for formula in allFormulas {
            if resultIDs.contains(formula.id) {
                advancedSearchResults.append(formula)
            }
        }
        
        categoryFormulas.removeAll()
        displayedFormulas.removeAll()
        
        if category != nil {
            
            for formula in viewModel.displayedFormulas {
                if category!.itemIDs.contains(formula.id) {
                    displayedFormulas.append(formula)
                    selectedFormulas.append(formula)
                    itemIDs.append(formula.id)
                    
                    categoryFormulas.append(formula)
                }
            }
        } else {
            favoritedFormulas.removeAll()
            
            for formula in viewModel.displayedFormulas {
                if formula.isFavorited {
                    favoritedFormulas.append(formula)
                }
            }
            
            displayedFormulas = getDisplayedFormulas()
        }
        
        if allFormulas.count > 0 {
            needFetch = false
        }
        
        refreshUI()
    }
    
    func gotoFormulaSearchViewControllerWithResults(_ formulaIDs: [String], title: String) {
        let viewController = mainStoryboard.instantiateViewController(withIdentifier: "FBFormulaSearchViewController") as! FBFormulaSearchViewController
        viewController.title = title
        viewController.resultIDs = formulaIDs
        navigationController?.pushViewController(viewController, animated: true)
    }
}

// MARK: UITableViewDataSource

extension FBFormulaSearchViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        if tableView == recentTableView {
            return recents.count
        }
        
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        if tableView == recentTableView {
            let dict = recents[section]
            let key = dict.keys.first!
            let recordIDs = dict[key]!
            
            return recordIDs.count
        }
        
        return displayedFormulas.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if tableView != recentTableView {
            
            let cell = tableView.dequeueReusableCell(withIdentifier: kCell) as! FBCell
            let formula = displayedFormulas[indexPath.row]
            
            cell.configure(formula: formula)
            cell.cellDelegate = self
            
            if allowsMultipleSelection || category != nil {
                
                cell.selectionStyle = .none
                
                cell.addButton.isHidden = false
                cell.numberLabel.isHidden = true
                cell.eyeButton.isHidden = true
                cell.lockButton.isHidden = true
                
                if category?.name == "All Formulas" || rightBarButton.title == "Edit" {
                    cell.addButton.isEnabled = false
                    cell.addButton.isHidden = true
                } else {
                    cell.addButton.isEnabled = true
                }
                
                if formula.isSelected {
                    cell.contentView.backgroundColor = FBColor.hexColor_F7FAF4()
                } else {
                    cell.contentView.backgroundColor = UIColor.white
                }
            } else if title == kSearchResults {
                cell.eyeButton.isHidden = true
                cell.addButton.isHidden = false
                cell.addButton.isEnabled = false
            }  else if title != nil {
                if title!.contains("Search Results") {
                    cell.eyeButton.isHidden = true
                    cell.addButton.isHidden = false
                    cell.addButton.isEnabled = false
                }
            }
            let wrapper = ActionCell()
            wrapper.delegate = self
            wrapper.animationStyle = .ladder
            wrapper.wrap(cell: cell,
                         actionsLeft: [
                            {
                                let action = TextAction(action: String(formula.id))
                                action.label.text = " + " + String(formula.herbIDs.count) + " "
                                action.backgroundColor = UIColor(red:99/255, green:160/255, blue:32/255, alpha:1.00)
                                return action
                            }(),
                            ],
                         actionsRight: [
                            
                ])
            return cell
            
        } else {
            
            var cell = tableView.dequeueReusableCell(withIdentifier: "cell")
            if cell == nil {
                cell = UITableViewCell.init(style: .default, reuseIdentifier: "cell")
                cell?.accessoryType = .disclosureIndicator
            }
            
            let dict = recents[indexPath.section]
            let key = dict.keys.first!
            let recordIDs = dict[key]!
            
            cell?.textLabel?.text = recordIDs[indexPath.row]
            
            return cell!
        }
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        if tableView == recentTableView {
            return false
        } else {
            if category?.name == "All Formulas" {
                return false
            }
            
            return category != nil
        }
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        if tableView == recentTableView {
            let dict = recents[section]
            return dict.keys.first!
        }
        
        return nil
    }
}

// MARK: UITableViewDelegate

extension FBFormulaSearchViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if tableView != recentTableView {
            output.homeViewController?.view.endEditing(true)
            needFetch = true
            if !displayedFormulas[indexPath.row].readOnly && self.profilePageType != nil
            {
                router.navigateToProfilePage(profilePageType: .updateHerb)
            }else{
                router.navigateToProfilePage(profilePageType: .view)
            }
        } else {
            let dict = recents[indexPath.section]
            let key = dict.keys.first!
            let recordIDs = dict[key]!
            let searchText = recordIDs[indexPath.row]
            
            var formulaIDs = [String]()
            
            for formula in allFormulas {
                
                let name = formula.name.capitalized
                if name.contains(searchText.capitalized) {
                    formulaIDs.append(formula.id)
                }
            }
            
            if formulaIDs.isEmpty {
                let alert = UIAlertController.init(title: "No formulas found", message: nil, preferredStyle: .alert)
                alert.addAction(UIAlertAction.init(title: "OK", style: .cancel, handler: nil))
                self.present(alert, animated: true, completion: nil)
            } else {
                self.gotoFormulaSearchViewControllerWithResults(formulaIDs, title: "Search Results of '\(searchText)'")
            }
        }
    }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        
        let deleteButton = UITableViewRowAction.init(style: .destructive, title: "Delete") { (delete, indexPath) in
            let formula = self.displayedFormulas[indexPath.row]
            self.showDeleteWarning(name: formula.name, id: formula.id, indexPath: indexPath)
        }
        
        return [deleteButton]
    }
}

// MARK: UISearchBarDelegate

extension FBFormulaSearchViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        
        FBCoreWorker.shared.saveSearchedText(searchBar.text, type: .formula)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchResults.removeAll()
        
        if searchText.isEmpty {
            displayedFormulas = getDisplayedFormulas()
        } else {
            displayedFormulas.removeAll()
            
            if allowsMultipleSelection {
                for formula in selectedFormulas {
                    displayedFormulas.append(formula)
                }
            } else {
                for formula in getDisplayedFormulas() {
                    if formula.isLocked {
                        displayedFormulas.append(formula)
                    }
                }
            }
            
            for formula in getDisplayedFormulas() {
                
                let name = formula.name.capitalized
                if name.contains(searchText.capitalized) || formula.simplifiedChinese.contains(searchText) || formula.traditionalChinese.contains(searchText) {
                    
                    if !searchResults.contains(formula) {
                        searchResults.append(formula)
                    }
                    
                    if rightBarButton.title == "Edit" || category?.name == "All Formulas" {
                        if !displayedFormulas.contains(formula) {
                            displayedFormulas.append(formula)
                        }
                    } else if !selectedFormulas.contains(formula) {
                        if !displayedFormulas.contains(formula) {
                            displayedFormulas.append(formula)
                        }
                    }
                }
            }
        }
        
        sortDisplayedFormulas()
        
        refreshUI()
    }
}

extension FBFormulaSearchViewController: FBCellDelegate {
    
    func addHerbToMyFormula(herb: DisplayedHerb?) {}
    
    func addHerbToCompare(_ herb: DisplayedHerb) {}
    func favoriteStatusChanged(herb: DisplayedHerb?, formula: DisplayedFormula?) {
        
        FBCoreWorker.shared.favoriteStatusChanged(with: formula!.id, type: "Formula")
        
        if self.filter == .favorite {
            let row = displayedFormulas.index(of: formula!)!
            favoritedFormulas.remove(at: row)
            displayedFormulas = getDisplayedFormulas()
            let indexPath = IndexPath.init(row: row, section: 0)
            tableView.deleteRows(at: [indexPath], with: .right)
            
            self.updateNumberLabel()
        }
    }
    
    func addFormulaToCompare(_ formula: DisplayedFormula) {
        nameTextField?.resignFirstResponder()
        
        var row = displayedFormulas.index(of: formula)!
        let indexPath = IndexPath(row: row, section: 0)
        
        sortDisplayedFormulas()
        
        row = displayedFormulas.index(of: formula)!
        let  newIndexPath = IndexPath(row: row, section: 0)
        
        if indexPath != newIndexPath {
            tableView.beginUpdates()
            tableView.moveRow(at: indexPath, to: newIndexPath)
            tableView.endUpdates()
        }
        
        if allowsMultipleSelection {
            
            if selectedFormulas.contains(formula) {
                selectedFormulas.remove(at: selectedFormulas.index(of: formula)!)
                itemIDs.remove(at: itemIDs.index(of: formula.id)!)
            } else {
                selectedFormulas.append(formula)
                itemIDs.append(formula.id)
            }
            
            updateNumberLabel()
        }
        
        output.herbSearchViewController?.compareFormula(formula)
    }
    
    func lockStatusChanged(herb: DisplayedHerb?, formula: DisplayedFormula?) {
        
        var row = displayedFormulas.index(of: formula!)!
        let indexPath = IndexPath(row: row, section: 0)
        
        sortDisplayedFormulas()
        
        row = displayedFormulas.index(of: formula!)!
        let  newIndexPath = IndexPath(row: row, section: 0)
        
        if indexPath != newIndexPath {
            tableView.beginUpdates()
            tableView.moveRow(at: indexPath, to: newIndexPath)
            tableView.endUpdates()
        }
    }
}
extension FBFormulaSearchViewController: ActionCellDelegate {
    public func didActionTriggered(cell: UITableViewCell, action: String) {
        print(action)

        
    }
}








