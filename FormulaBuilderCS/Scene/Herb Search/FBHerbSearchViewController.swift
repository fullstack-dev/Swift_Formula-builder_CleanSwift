//
//  FBHerbSearchViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/3/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FormulaBuilderCore

protocol FBHerbSearchViewControllerInput {
    func displayFetchedHerbs(viewModel: FBHerbSearch.FetchHerbs.ViewModel)
}

protocol FBHerbSearchViewControllerOutput {
    func fetchHerbs(request: FBHerbSearch.FetchHerbs.Request)
    var formulaSearchViewController: FBFormulaSearchViewController? { get set }
    var homeViewController: FBHomeViewController? { set get }
    var addToFormulaViewController: FBAddToFormulaViewController! { set get }
    var profileFormulaViewController: FBProfileFormulasViewController? { set get }
    var recentSearchViewController: FBRecentSearchesViewController? { set get }
    var herbs: [FBHerb]! { get }
}

class FBHerbSearchViewController: FBSearchViewController {
    var output: FBHerbSearchViewControllerOutput!
    var router: FBHerbSearchRouter!
    
    
    let headerHeight: CGFloat = 45
    var allHerbs = [DisplayedHerb]()
    var categoryHerbs = [DisplayedHerb]()
    var displayedHerbs = [DisplayedHerb]()
    var displayedHerbIDs = [String]()
    var favoritedHerbs = [DisplayedHerb]()
    var addToFormulaHerbs = [DisplayedHerb]()
    var selectedHerbs = [DisplayedHerb]()
    var searchResults = [DisplayedHerb]()
    var advancedSearchResults = [DisplayedHerb]()
    var formulasToCompare = [DisplayedFormula]()
    var alternateHerbsToCompare = [DisplayedHerb]()
    var alternateHerbIDsToCompare = [String]()
    
    var recents = [[String: [String]]]()
    
    var profilePageType : ProfileViewType?
    
    @IBOutlet weak var recentTableView: UITableView!
    @IBOutlet weak var searchButton: UIButton!
    @IBOutlet weak var headerLabelWidth: NSLayoutConstraint!
    @IBOutlet weak var headerTop: NSLayoutConstraint!
    @IBOutlet weak var myFormulaNumberLabel: FBNumberLabel!
    @IBOutlet weak var addToFormulaHeaderView: UIView!
    //    @IBOutlet weak var selectedFormularTitle: UILabel!
    
    var shouldNotShowReadyOnly : Bool = false
    
    override func awakeFromNib() {
        super.awakeFromNib()
        
        FBHerbSearchConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let gesture = UITapGestureRecognizer(target: self, action: #selector(touchedAddToFormulaHeaderView))
        addToFormulaHeaderView.addGestureRecognizer(gesture)
    }
    
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        if output.formulaSearchViewController != nil {
            rightBarButton?.title = ""
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchHerbs()
    }
    
    func fetchHerbs() {
        if needFetch {
            let request = FBHerbSearch.FetchHerbs.Request()
            output.fetchHerbs(request: request)
        }
    }
    
    func fetchRecents() {
        
        searchBarBackToNormal()
        searchButton.isEnabled = false
        
        recents.removeAll()
        recentTableView.superview?.bringSubview(toFront: recentTableView)
        
        store.fetchRecentRecords(withType: .herb) { recents in
            
            var dict = [String: [String]]()
            var recoreIDs = [String]()
            
            for recent in recents {
                
                let date0 = Date(timeIntervalSinceReferenceDate: recent.timestamp)
                let dateString = FBHelper.formattedDateString(date0)
                
                if self.recents.isEmpty {
                    recoreIDs.append(recent.recordID)
                    dict[dateString] = recoreIDs
                    self.recents.append(dict)
                    
                } else {
                    let lastDict = self.recents.last!
                    if lastDict.keys.first == dateString {
                        recoreIDs.append(recent.recordID)
                        dict[dateString] = recoreIDs
                        self.recents.removeLast()
                        self.recents.append(dict)
                    } else {
                        dict.removeAll()
                        recoreIDs.removeAll()
                        
                        recoreIDs.append(recent.recordID)
                        dict[dateString] = recoreIDs
                        self.recents.append(dict)
                    }
                }
            }
            
            self.recentTableView.reloadData()
            
            self.numberLabel.text = "\(self.recents.count)"
        }
    }
    
    
    func fetchHerbsWithResultIDs(_ resultIDs: [String]) {
        self.resultIDs = resultIDs
    }
    
    func touchedAddToFormulaHeaderView() {
        if headerTop.constant == headerHeight {
            if output.formulaSearchViewController != nil {
                headerTop.constant = UIScreen.main.bounds.size.height - 64 - headerHeight * 2
                output.homeViewController?.moveFormulaSearchViewToBottom()
            } else {
                headerTop.constant = view.frame.size.height - headerHeight
            }
        } else {
            headerTop.constant = headerHeight
        }
        
        UIView.animate(withDuration: kDuration) {
            self.view.layoutIfNeeded()
        }
    }
    
    func sortDisplayedHerbs() {
        var addToFormulaHerbs: [DisplayedHerb] = []
        var otherHerbs: [DisplayedHerb] = []
        
        // name alphabetically
        let sortedHerbs = displayedHerbs.sorted(by: { (h0, h1) -> Bool in
            h0.name < h1.name
        })
        
        for herb in sortedHerbs {
            if herb.addToFormula || herb.isSelected {
                addToFormulaHerbs.append(herb)
            } else {
                otherHerbs.append(herb)
            }
        }
        
        displayedHerbs = addToFormulaHerbs + otherHerbs
        
        displayedHerbIDs = []
        for herb in displayedHerbs {
            displayedHerbIDs.append(herb.id)
        }
    }
    
    fileprivate func sortComparedFormulaHerbs() {
        var addToFormulaHerbs: [DisplayedHerb] = []
        var otherHerbs: [DisplayedHerb] = []
        
        // name alphabetically
        let sortedHerbs = displayedHerbs.sorted(by: { (h0, h1) -> Bool in
            h0.name < h1.name
        })
        
        for herb in sortedHerbs {
            if herb.containsInComparedFormulas {
                addToFormulaHerbs.append(herb)
            } else {
                otherHerbs.append(herb)
            }
        }
        
        displayedHerbs = addToFormulaHerbs + otherHerbs
        displayedHerbIDs = []
        for herb in displayedHerbs {
            displayedHerbIDs.append(herb.id)
        }
        
    }
    
    func refreshUI() {
        sortDisplayedHerbs()
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.updateNumberLabel()
            self.updateMyFormulaNumberLabel()
            
            self.changeHeaderPosition()
        }
        
        notifyFormulaSearchViewController()
    }
    
    fileprivate func changeHeaderPosition() {
        if addToFormulaHerbs.isEmpty || rightBarButton.title == "Save" {
            headerTop.constant = 0
        } else {
            headerTop.constant = headerHeight
        }
        
        UIView.animate(withDuration: kDuration) {
            self.view.layoutIfNeeded()
        }
    }
    
    fileprivate func notifyFormulaSearchViewController() {
        if output.formulaSearchViewController != nil {
            var herbIDs = [String]()
            
            for herb in displayedHerbs {
                herbIDs.append(herb.id)
            }
            
            output.formulaSearchViewController?.refereshUIWithHerbSearchResults(herbIDs)
        }
    }
    
    func compareFormula(_ formula: DisplayedFormula) {
        
        alternateHerbsToCompare.removeAll()
        alternateHerbIDsToCompare.removeAll()
        displayedHerbs.removeAll()
        displayedHerbIDs.removeAll()
        
        if formulasToCompare.contains(formula) {
            formulasToCompare.remove(at: formulasToCompare.index(of: formula)!)
        } else {
            formulasToCompare.append(formula)
        }
        
        if formulasToCompare.isEmpty {
            displayedHerbs = allHerbs
            refreshUI()
            return
        }
        
        for formula in formulasToCompare {
            for herb in formula.formulaObj!.herbs {
                guard displayedHerbIDs.contains(herb.id) else {
                    displayedHerbs.append(DisplayedHerb(with: herb))
                    displayedHerbIDs.append(herb.id)
                    continue
                }
                
                guard alternateHerbIDsToCompare.contains(herb.id) else {
                    alternateHerbsToCompare.append(DisplayedHerb(with: herb))
                    alternateHerbIDsToCompare.append(herb.id)
                    continue
                }
            }
        }
        
        self.tableView.reloadData()
        self.updateNumberLabel()
    }
    
    func refereshUIWithFilter(_ filter: FetchFilter) {
        
        recentTableView.superview?.sendSubview(toBack: recentTableView)
        searchButton.isEnabled = true
        
        //        if self.filter != filter {
        self.filter = filter
        needFetch = true
        
        fetchHerbs()
        //        }
    }
    
    func getDisplayedHerbs() -> [DisplayedHerb] {
        
        if title != nil {
            if title!.contains("Search Results") {
                rightBarButton?.title = ""
                rightBarButton?.isEnabled = false
                
                return advancedSearchResults
            }
        }
        
        if title == kSearchResults {
            return advancedSearchResults
        } else if category != nil && allowsMultipleSelection == false {
            return categoryHerbs
        } else if filter == .all {
            if (shouldNotShowReadyOnly) {
                return allHerbs.filter({$0.readOnly == false})
            } else {
                return allHerbs
            }
        } else {
            return favoritedHerbs
        }
    }
    
    func searchingFormula() {
        searchBarBackToNormal()
        
        if addToFormulaHerbs.isEmpty {
            headerTop.constant = 0
        } else {
            headerTop.constant = headerHeight
        }
        
        UIView.animate(withDuration: kDuration) {
            self.view.layoutIfNeeded()
        }
    }
    
    func searchBarBackToNormal() {
        searchButton.isHidden = false
        searchBar.isHidden = true
        headerLabelWidth.constant = 39.5
    }
    
    override func dismissKeyboard() {
        super.dismissKeyboard()
        
        searchBarBackToNormal()
    }
    
    func gotoHerbSearchViewControllerWithResults(_ herbIDs: [String], title: String) {
        let viewController = mainStoryboard.instantiateViewController(withIdentifier: "FBHerbSearchViewController") as! FBHerbSearchViewController
        viewController.title = title
        viewController.resultIDs = herbIDs
        navigationController?.pushViewController(viewController, animated: true)
    }
}

// MARK: Utils Helpers
extension FBHerbSearchViewController {
    func updateMyFormulaNumberLabel() {
        myFormulaNumberLabel.text = "\(addToFormulaHerbs.count)"
    }
    
    fileprivate func updateNumberLabel() {
        if allowsMultipleSelection {
            numberLabel.text = "\(selectedHerbs.count)"
        } else {
            numberLabel.text = "\(displayedHerbs.count)"
        }
    }
    
}

// MARK: Clear Actions (right corner of Home, Favorite Screen)
extension FBHerbSearchViewController {
    func clearHerbs() {
        for herb in allHerbs {
            if (herb.isFavorited) {
                FBCoreWorker.shared.favoriteStatusChanged(with: herb.id, type: "Herb")
            }
        }
        
        needFetch = true
        fetchHerbs()
    }
    
    func clearMyFormula() {
        for herb in addToFormulaHerbs {
            if (herb.isFavorited) {
                FBCoreWorker.shared.favoriteStatusChanged(with: herb.id, type: "Herb")
            }
        }
        
        FBSaveToFormulaHelper.shared.clearSavedHerbIDs()
        needFetch = true
        fetchHerbs()
    }
    
    func clearAll() {
        for herb in allHerbs {
            if (herb.isFavorited) {
                FBCoreWorker.shared.favoriteStatusChanged(with: herb.id, type: "Herb")
            }
        }
        FBSaveToFormulaHelper.shared.clearSavedHerbIDs()
        needFetch = true
        fetchHerbs()
    }
}

// MARK: Categories Feature
extension FBHerbSearchViewController {
    func saveCategory() {
        if preCheckFail() == false {
            
            if category == nil {
                createNewCategory()
            } else {
                updateCategory()
            }
            
        }
    }
    
    func updateCategory() {
        nameTextField?.resignFirstResponder()
        category!.name = nameTextField!.text!
        category!.itemIDs = itemIDs
        
        FBCoreWorker.shared.updateCategory(category: category!, type: .herb) { displayedCategory, error in
            
            self.category = displayedCategory
            
            self.categoryHerbs.removeAll()
            for herb in self.allHerbs {
                if displayedCategory!.itemIDs.contains(herb.id) {
                    self.categoryHerbs.append(herb)
                }
            }
            
            if error == nil {
                self.rightBarButton?.title = "Edit"
                self.nameTextField?.isEnabled = false
                self.displayedHerbs = self.selectedHerbs
                self.allowsMultipleSelection = false
                
                for herb in self.selectedHerbs {
                    herb.addToFormula = false
                }
                
                for herb in self.addToFormulaHerbs {
                    herb.addToFormula = true
                }
                
                self.refreshUI()
            } else {
                
            }
        }
    }
    
    func createNewCategory() {
        
        FBCoreWorker.shared.createCategory(name: nameTextField!.text!, itemIDs: itemIDs, type: .herb) { (displayedCategory, error) in
            
            self.category = displayedCategory
            
            self.categoryHerbs.removeAll()
            for herb in self.allHerbs {
                if displayedCategory!.itemIDs.contains(herb.id) {
                    self.categoryHerbs.append(herb)
                }
            }
            
            if error == nil {
                self.rightBarButton?.title = "Edit"
                self.nameTextField?.isEnabled = false
                self.displayedHerbs = self.selectedHerbs
                self.allowsMultipleSelection = false
                
                for herb in self.selectedHerbs {
                    herb.addToFormula = false
                }
                
                for herb in self.addToFormulaHerbs {
                    herb.addToFormula = true
                }
                
                self.refreshUI()
            } else {
                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
            }
        }
    }
    
    func duplicateCategory () {
        
        FBCoreWorker.shared.createCategory(name: self.category!.name + " Copy", itemIDs: itemIDs, type: .herb) { (displayedCategory, error) in
            
            self.category = displayedCategory
            
            if error == nil {
                let alert = UIAlertController.init(title: "Duplicate Succeed", message: nil, preferredStyle: .alert)
                alert.addAction(UIAlertAction.init(title: "OK", style: .default, handler: nil))
                self.present(alert, animated: true, completion: nil)
            } else {
                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
            }
        }
    }
    
    func editCategory() {
        view.endEditing(true)
        
        let alert = UIAlertController.init(title: nil, message: nil, preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction.init(title: "Cancel", style: .cancel, handler: nil))
        alert.addAction(UIAlertAction.init(title: "Edit Title", style: .default, handler: { action in
            self.nameTextField?.isEnabled = true
            self.nameTextField?.becomeFirstResponder()
            self.rightBarButton?.title = "Save"
        }))
        alert.addAction(UIAlertAction.init(title: "Add Herbs", style: .default, handler: { action in
            self.displayedHerbs = self.allHerbs
            
            for herb in self.addToFormulaHerbs {
                herb.addToFormula = false
            }
            
            for herb in self.displayedHerbs {
                if self.selectedHerbs.contains(herb) {
                    herb.addToFormula = true
                }
            }
            
            self.allowsMultipleSelection = true
            
            self.sortDisplayedHerbs()
            
            self.refreshUI()
            
            self.rightBarButton?.title = "Save"
        }))
        alert.addAction(UIAlertAction.init(title: "Duplicate", style: .default, handler: { action in
            self.duplicateCategory()
        }))
        alert.addAction(UIAlertAction.init(title: "Delete Category", style: .destructive, handler: { action in
            self.showDeleteWarning(name: self.category!.name, id: self.category!.id, indexPath: nil)
        }))
        
        present(alert, animated: true, completion: nil)
    }
    
    func showDeleteWarning(name: String, id: String, indexPath: IndexPath?) {
        var title = "Delete Category"
        if indexPath != nil {
            title = "Delete Herb"
        }
        let alert = UIAlertController(title: title, message: "This will delete \(name),\nare you sure?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        alert.addAction(UIAlertAction.init(title: "Delete", style: .destructive, handler: { _ in
            if indexPath == nil {
                FBCoreWorker.shared.deleteCategory(id: id, type: .herb, completion: { error in
                    if error == nil {
                        let _ = self.navigationController?.popViewController(animated: true)
                    }
                })
            } else {
                if let _ = self.category
                {
                    self.category!.itemIDs.remove(at: self.category!.itemIDs.index(of: id)!)
                    FBCoreWorker.shared.updateCategory(category: self.category!, type: .formula, completion: { (category, error) in
                        //                    self.category = category
                        self.displayedHerbs.remove(at: indexPath!.row)
                        self.tableView.reloadData()
                        self.updateNumberLabel()
                    })
                }
                
                
            }
        }))
        present(alert, animated: true, completion: nil)
    }
}

// MARK: Button Handlers
extension FBHerbSearchViewController {
    @IBAction func searchButtonClicked(_ sender: UIButton) {
        
        if FBSaveToFormulaHelper.shared.getSavedHerbIDs().count > 0 && rightBarButton.title != "Save" {
            headerTop.constant = headerHeight
        } else {
            headerTop.constant = 0
        }
        
        UIView.animate(withDuration: kDuration) {
            self.view.layoutIfNeeded()
        }
        
        sender.isHidden = true
        searchBar.isHidden = false
        headerLabelWidth.constant = 0
        
        if output.homeViewController == nil {
            self.searchBar.becomeFirstResponder()
        } else {
            output.homeViewController?.searchForHerb(true, {
                self.searchBar.becomeFirstResponder()
            })
        }
    }
    
    @IBAction func rightBarButtonClicked(_ sender: UIBarButtonItem) {
        
        if rightBarButton?.title == "Save" {
            saveCategory()
        } else {
            editCategory()
        }
    }
    
    @IBAction func saveToFormula(_ sender: UIButton) {
        if (output.profileFormulaViewController != nil) {
            output.profileFormulaViewController!.addHerbsToFormula(selectedHerbs: addToFormulaHerbs)
            self.dismissVC()
        } else {
            let vc = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileViewController") as! FBProfileViewController
            vc.profileViewType = ProfileViewType.createFormula
            vc.addToFormulaHerbs = addToFormulaHerbs
            self.navigationController?.pushViewController(vc, animated: true)
        }
    }
}

// MARK: FBHerbSearchViewControllerInput
extension FBHerbSearchViewController: FBHerbSearchViewControllerInput {
    
    func displayFetchedHerbs(viewModel: FBHerbSearch.FetchHerbs.ViewModel) {
        allHerbs = viewModel.displayedHerbs
        
        for herb in allHerbs {
            if resultIDs.contains(herb.id) {
                advancedSearchResults.append(herb)
            }
        }
        
        output.addToFormulaViewController.refereshUI()
        
        let addToFormulaHerbIDs = FBSaveToFormulaHelper.shared.getSavedHerbIDs()
        addToFormulaHerbs.removeAll()
        for herb in allHerbs {
            if addToFormulaHerbIDs.contains(herb.id) {
                if rightBarButton.title != "Save" {
                    herb.addToFormula = true
                } else {
                    herb.addToFormula = false
                }
                
                addToFormulaHerbs.append(herb)
            }
        }
        
        changeHeaderPosition()
        
        categoryHerbs.removeAll()
        displayedHerbs.removeAll()
        
        if category != nil {
            for herb in viewModel.displayedHerbs {
                if category!.itemIDs.contains(herb.id) {
                    //                    herb.addToFormula = true
                    displayedHerbs.append(herb)
                    selectedHerbs.append(herb)
                    itemIDs.append(herb.id)
                    categoryHerbs.append(herb)
                }
            }
            
        } else {
            favoritedHerbs.removeAll()
            
            for herb in viewModel.displayedHerbs {
                if herb.isFavorited {
                    favoritedHerbs.append(herb)
                }
            }
            
            displayedHerbs = getDisplayedHerbs()
        }
        
        output.formulaSearchViewController?.originalHerbsCount = displayedHerbs.count
        
        if allHerbs.count > 0 {
            needFetch = false
        }
        
        refreshUI()
    }
}


// MARK: UITableViewDataSource
extension FBHerbSearchViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        if tableView == recentTableView {
            return recents.count
        }
        else if self.formulasToCompare.count != 0 {
            return self.formulasToCompare.count
        }
        else{
            return 1
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        if tableView == recentTableView {
            let dict = recents[section]
            let key = dict.keys.first!
            let recordIDs = dict[key]!
            
            return recordIDs.count
        }
        else if self.formulasToCompare.count != 0 {
            let x = formulasToCompare[section].herbIDs
            return x.count
        }
        else{
            return displayedHerbs.count
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let section = indexPath.section
        let row = indexPath.row
        
        guard tableView != recentTableView else {
            var cell = tableView.dequeueReusableCell(withIdentifier: "cell")
            if cell == nil {
                cell = UITableViewCell.init(style: .default, reuseIdentifier: "cell")
                cell?.accessoryType = .disclosureIndicator
            }
            
            let dict = recents[indexPath.section]
            let key = dict.keys.first!
            let recordIDs = dict[key]!
            
            cell?.textLabel?.text = recordIDs[indexPath.row]
            
            return cell!
        }
        
        
        let cell = tableView.dequeueReusableCell(withIdentifier: kCell) as! FBCell
        let herb = self.formulasToCompare.count != 0 ? DisplayedHerb(with: formulasToCompare[section].formulaObj!.herbs[row]) : displayedHerbs[row]
        
        cell.contentView.backgroundColor = alternateHerbIDsToCompare.contains(herb.id) ? FBColor.hexColor_FDFCDE() : UIColor.white
        
        cell.configure(herb: herb)
        cell.cellDelegate = self
        
        if allowsMultipleSelection || category != nil {
            cell.selectionStyle = .none
            cell.numberLabel.isHidden = true
            cell.eyeButton.isHidden = true
            cell.lockButton.isHidden = true
        }
        
        for herbInMyFormula in addToFormulaHerbs {
            if (herbInMyFormula.id == herb.id) {
                cell.contentView.backgroundColor = FBColor.hexColor_F7FAF4()
                break
            }
        }
        
        let wrapper = ActionCell()
        wrapper.delegate = self
        wrapper.animationStyle = .ladder
        wrapper.wrap(cell: cell,
                     actionsLeft: [
                        {
                            let action = IconAction(action: String(herb.id))
                            action.icon.image = #imageLiteral(resourceName: "add").withRenderingMode(.alwaysTemplate)
                            action.icon.tintColor = UIColor.white
                            action.backgroundColor = UIColor(red:99/255, green:160/255, blue:32/255, alpha:1.00)
                            return action
                        }(),
                        ],
                     actionsRight: [
                        {
                            let action = IconAction(action: "delete_" + String(herb.id))
                            action.icon.image = #imageLiteral(resourceName: "contact_min").withRenderingMode(.alwaysTemplate)
                            action.icon.tintColor = UIColor.white
                            action.backgroundColor = UIColor.red
                            return action
                        }(),
                        
                        ])
        return cell
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        if tableView == recentTableView {
            return false
        } else {
            if category?.name == "All Herbs" {
                return false
            }
            
            return category != nil
        }
    }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        
        let deleteButton = UITableViewRowAction.init(style: .destructive, title: "Delete") { (delete, indexPath) in
            let herb = self.displayedHerbs[indexPath.row]
            self.showDeleteWarning(name: herb.name, id: herb.id, indexPath: indexPath)
        }
        
        return [deleteButton]
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        if tableView == recentTableView {
            let dict = recents[section]
            return dict.keys.first!
        }
        else if self.formulasToCompare.count != 0{
            return self.formulasToCompare[section].name
        }
        else{
            return nil
        }
        
    }
}

// MARK: UITableViewDelegate
extension FBHerbSearchViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if tableView == recentTableView {
            let dict = recents[indexPath.section]
            let key = dict.keys.first!
            let recordIDs = dict[key]!
            let searchText = recordIDs[indexPath.row]
            
            var herbIDs = [String]()
            
            for herb in allHerbs {
                
                let name = herb.name.capitalized
                if name.contains(searchText.capitalized) {
                    herbIDs.append(herb.id)
                }
            }
            
            if herbIDs.isEmpty {
                let alert = UIAlertController.init(title: "No herbs found", message: nil, preferredStyle: .alert)
                alert.addAction(UIAlertAction.init(title: "OK", style: .cancel, handler: nil))
                self.present(alert, animated: true, completion: nil)
            } else {
                self.gotoHerbSearchViewControllerWithResults(herbIDs, title: "Search Results of '\(searchText)'")
            }
        } else {
            output.homeViewController?.view.endEditing(true)
            needFetch = true
            if !displayedHerbs[indexPath.row].readOnly && self.profilePageType != nil
            {
                router.navigateToProfilePage(profileViewType: .updateHerb)
            } else {
                router.navigateToProfilePage(profileViewType: .view)
            }
        }
    }
    
}

// MARK: UISearchBarDelegate
extension FBHerbSearchViewController: UISearchBarDelegate {
    
    func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
        keyboardTitleLabel.text = "Search herbs"
        
        return true
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        
        FBCoreWorker.shared.saveSearchedText(searchBar.text, type: .herb)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchResults.removeAll()
        
        if searchText.isEmpty {
            displayedHerbs = getDisplayedHerbs()
        } else {
            displayedHerbs.removeAll()
            
            for herb in getDisplayedHerbs() {
                
                let name = herb.name.capitalized
                if name.contains(searchText.capitalized) || herb.simplifiedChinese.contains(searchText) || herb.traditionalChinese.contains(searchText) || herb.alternateNames.contains(searchText.capitalized) {
                    
                    if !searchResults.contains(herb) {
                        searchResults.append(herb)
                    }
                    
                    if !displayedHerbs.contains(herb) {
                        displayedHerbs.append(herb)
                    }
                }
            }
        }
        
        sortDisplayedHerbs()
        
        refreshUI()
    }
}

// MARK: FBCellDelegate
extension FBHerbSearchViewController: FBCellDelegate {
    
    func addFormulaToCompare(_ formula: DisplayedFormula) {}
    
    func addHerbToCompare(_ herb: DisplayedHerb) {
        var row = displayedHerbs.index(of: herb)!
        let indexPath = IndexPath(row: row, section: 0)
        
        sortDisplayedHerbs()
        
        row = displayedHerbs.index(of: herb)!
        let  newIndexPath = IndexPath(row: row, section: 0)
        
        if indexPath != newIndexPath {
            tableView.beginUpdates()
            tableView.moveRow(at: indexPath, to: newIndexPath)
            tableView.endUpdates()
        }
        if allowsMultipleSelection {
            
            if selectedHerbs.contains(herb) {
                selectedHerbs.remove(at: selectedHerbs.index(of: herb)!)
                itemIDs.remove(at: itemIDs.index(of: herb.id)!)
            } else {
                selectedHerbs.append(herb)
                itemIDs.append(herb.id)
            }
            
            updateNumberLabel()
        }
        output.formulaSearchViewController?.compareHerb(herb)
    }
    
    func favoriteStatusChanged(herb: DisplayedHerb?, formula: DisplayedFormula?) {
        
        FBCoreWorker.shared.favoriteStatusChanged(with: herb!.id, type: "Herb")
        
        if self.filter == .favorite {
            let row = displayedHerbs.index(of: herb!)!
            favoritedHerbs.remove(at: row)
            displayedHerbs = getDisplayedHerbs()
            let indexPath = IndexPath.init(row: row, section: 0)
            tableView.deleteRows(at: [indexPath], with: .right)
            
            self.updateNumberLabel()
        }
    }
    
    func addHerbToMyFormula(herb: DisplayedHerb?) {
        
        var row = displayedHerbs.index(of: herb!)!
        let indexPath = IndexPath(row: row, section: 0)
        displayedHerbs[row].addToFormula = !displayedHerbs[row].addToFormula
        
        sortDisplayedHerbs()
        
        row = displayedHerbs.index(of: herb!)!
        let  newIndexPath = IndexPath(row: row, section: 0)
        
        if indexPath != newIndexPath {
            tableView.beginUpdates()
            tableView.moveRow(at: indexPath, to: newIndexPath)
            tableView.endUpdates()
        }
        
        if rightBarButton?.title != "Save" {
            if addToFormulaHerbs.contains(herb!) {
                addToFormulaHerbs.remove(at: addToFormulaHerbs.index(of: herb!)!)
                FBSaveToFormulaHelper.shared.removeHerbID(herb!.id)
            } else {
                addToFormulaHerbs.append(herb!)
                FBSaveToFormulaHelper.shared.addHerbID(herb!.id)
            }
            
            output.addToFormulaViewController.refereshUI()
            
            self.updateMyFormulaNumberLabel()
            self.changeHeaderPosition()
        }
        
        if allowsMultipleSelection {
            
            if selectedHerbs.contains(herb!) {
                selectedHerbs.remove(at: selectedHerbs.index(of: herb!)!)
                itemIDs.remove(at: itemIDs.index(of: herb!.id)!)
            } else {
                selectedHerbs.append(herb!)
                itemIDs.append(herb!.id)
            }
            
            updateNumberLabel()
        }
        
        tableView.reloadData()
    }
    
    func lockStatusChanged(herb: DisplayedHerb?, formula: DisplayedFormula?) {}
}

// MARK: ActionCellDelegate
extension FBHerbSearchViewController: ActionCellDelegate {
    public func didActionTriggered(cell: UITableViewCell, action: String) {
        if !action.contains("delete_") {
            if let index = displayedHerbIDs.index(of: action) {
                addHerbToMyFormula(herb: displayedHerbs[index])
            }
        } else {
            let herbId = action.replacingOccurrences(of: "delete_", with: "")
            if let index = displayedHerbIDs.index(of: herbId) {
                let herb = self.displayedHerbs[index]
                self.showDeleteWarning(name: herb.name, id: herb.id, indexPath: IndexPath(row: 0, section: index))
            }
        }
    }
}

