//
//  FBProfileViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/10/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CarbonKit
import FormulaBuilderCore

public enum ProfileViewType {
    case createHerb, updateHerb, createFormula, updateFormula, view
}

protocol FBProfileViewControllerInput {
    func displayFormulas(viewModel: FBProfile.CreateUpdateFormula.ViewModel)
    func displayHerbs(viewModel: FBProfile.CreateUpdateHerb.ViewModel)
}

protocol FBProfileViewControllerOutput {
    func saveHerb(request: FBProfile.CreateUpdateHerb.Request, errorCallback: @escaping (_ error: FBStoreError?) -> Void)
    func saveFormula(request: FBProfile.CreateUpdateFormula.Request, errorCallback: @escaping (_ error: FBStoreError?) -> Void)
}

class FBProfileViewController: UIViewController {
    var output: FBProfileViewControllerOutput!
    var router: FBProfileRouter!
    
    @IBOutlet weak var topToolbar: UIToolbar!
    @IBOutlet weak var containerView: UIView!
    var favoriteBarBtn: UIBarButtonItem?
    
    var topToolbarSwipeNavigation : CarbonTabSwipeNavigation!
    var infoViewController: FBProfileInfoViewController!
    var formulaViewController: FBProfileFormulasViewController!
    var moreViewController: FBProfileMoreViewController!
    var textsViewController: FBProfileTextsViewController!
    var notesViewController: FBProfileNotesViewController!
    var viewControllers : [UIViewController] = [UIViewController]()
    
    var addToFormulaHerbs: [DisplayedHerb]?
    var herb: FBHerb?
    var formula: FBFormula?
    var alternateHerb: FBAlternateHerb?
    var profileViewType: ProfileViewType = .view
    
    var isfavoriteUpdated : Bool = false
    var newAlternateNames : [DisplayedAlternateHerb] = []
    
    override func awakeFromNib() {
        super.awakeFromNib()
        FBProfileConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureNavigationBar()
        configureDetailView()
        configureTopToolBar()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        updateFavorite()
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        
        coordinator.animate(alongsideTransition: { context in
            let toolbarLabels : [String] = [
                "  Info  ",
                (self.herb != nil) ? "Formulas" : " Herbs  ",
                (self.herb != nil) ? "  More  ": "  Prep  ",
                " Texts  ",
                " Notes  "
            ];
            let length = toolbarLabels.reduce("", +).characters.count
            var screenWidth: CGFloat! = 0;
            if UIDevice.current.orientation.isLandscape { // landscape mode
                screenWidth = self.view.frame.size.width
            } else { // portrait mode
                screenWidth = self.view.frame.size.width
            }
            
            toolbarLabels.enumerated().forEach { (index, item) in
                self.topToolbarSwipeNavigation.carbonSegmentedControl?.setWidth(screenWidth * CGFloat(item.characters.count) / CGFloat(length), forSegmentAt: index)
            }
            
        }, completion: nil)
    }
    
    func configureNavigationBar() {
        if (self.navigationItem.leftBarButtonItems == nil) {
            let fixedSpace : UIBarButtonItem = UIBarButtonItem.init(barButtonSystemItem: .fixedSpace, target: nil, action: nil)
            fixedSpace.width = 0
            
            let closeBtn : UIButton = UIButton.init(type: .custom)
            closeBtn.frame = CGRect(x: 0, y: 0, width: 26, height: 26)
            closeBtn.setImage(UIImage(named: "backIcon"), for: .normal)
            closeBtn.tag = 3000
            closeBtn.addTarget(self, action: #selector(backButtonTapped), for: .touchUpInside)
            
            self.navigationItem.leftBarButtonItems = [UIBarButtonItem.init(customView: closeBtn), fixedSpace]
            self.navigationItem.hidesBackButton = true
        }
        
        if (self.favoriteBarBtn == nil) {
            let favoriteBtn = UIButton.init(type: .custom)
            favoriteBtn.frame = CGRect(x: 0, y: 0, width: 40, height: 26)
            favoriteBtn.setImage(UIImage(named: "favorite"), for: .normal)
            favoriteBtn.tag = 3000
            favoriteBtn.addTarget(self, action: #selector(rightBarButtonClicked(_:)), for: .touchUpInside)
            self.favoriteBarBtn = UIBarButtonItem.init(customView: favoriteBtn)
        }
        
        let editBtn : UIButton = UIButton.init(type: .custom)
        editBtn.frame = CGRect(x: 0, y: 0, width: 26, height: 26)
        editBtn.setImage(UIImage(named: "pencil_edit"), for: .normal)
        editBtn.tag = 3000
        editBtn.addTarget(self, action: #selector(editBarButtonClicked(_:)), for: .touchUpInside)
        
        var editBtnAvailable : Bool = false
        if (self.profileViewType == .view) {
            if (self.herb != nil) {
                editBtnAvailable = !(self.herb!.readOnly)
            } else {
                editBtnAvailable = !(self.formula!.readOnly)
            }
        } else {
            editBtnAvailable = false
        }
        
        self.navigationItem.rightBarButtonItems = editBtnAvailable ? [UIBarButtonItem.init(customView: editBtn), favoriteBarBtn!]
                                                                   : [favoriteBarBtn!]
        
        let favoriteBtn = favoriteBarBtn?.customView as! UIButton
        if (profileViewType != .view) {
            favoriteBtn.setTitle("Save", for: .normal)
            favoriteBtn.setImage(nil, for: .normal)
        } else {
            favoriteBtn.setTitle("", for: .normal)
            if (herb != nil) {
                favoriteBtn.setImage(UIImage(named: herb!.favorite ? "favorite_selected" : "favorite"), for: .normal)
            } else if(formula != nil){
                favoriteBtn.setImage(UIImage(named: formula!.favorite ? "favorite_selected" : "favorite"), for: .normal)
            }
        }
        
        if (profileViewType == .createHerb) {
            navigationItem.title = "New Herb"
        } else if (profileViewType == .createFormula) {
            navigationItem.title = "New Formula"
        } else {
            if (herb != nil) {
                navigationItem.title = DisplayedProfileInfo(with: herb!).name
            } else if (formula != nil){
                navigationItem.title = DisplayedProfileInfo(with: formula!).name
            }else{
                navigationItem.title = DisplayedProfileInfo(with: alternateHerb!).name
            }
        }
    }
    
    func configureTopToolBar() {
        let toolbarLabels : [String] = [
            "  Info  ",
            (herb != nil) ? "Formulas" : " Herbs  ",
            (herb != nil) ? "  More  ": "  Prep  ",
            " Texts  ",
            " Notes  "
        ];
        
        topToolbarSwipeNavigation = CarbonTabSwipeNavigation(items: toolbarLabels, toolBar: topToolbar, delegate: self)
        topToolbarSwipeNavigation.insert(intoRootViewController: self, andTargetView: self.containerView)
        
        topToolbarSwipeNavigation.toolbar.isTranslucent = false
        topToolbarSwipeNavigation.setIndicatorColor(FBColor.hexColor_0076FF())
        
        topToolbarSwipeNavigation.setNormalColor(FBColor.hexColor_9B9B9B(), font: FBFont.SFUIText_Regalur14())
        topToolbarSwipeNavigation.setSelectedColor(FBColor.hexColor_0076FF(), font: FBFont.SFUIText_Regalur14())
        
        topToolbarSwipeNavigation.setTabBarHeight(112)
        
        topToolbar.barTintColor = FBColor.hexColor_FAFAFA()
        navigationController?.navigationBar.barTintColor = FBColor.hexColor_FAFAFA()
        
        let length = toolbarLabels.reduce("", +).characters.count
        let screenWidth = self.view.frame.size.width
        toolbarLabels.enumerated().forEach { (index, item) in
            topToolbarSwipeNavigation.carbonSegmentedControl?.setWidth(screenWidth * CGFloat(item.characters.count) / CGFloat(length), forSegmentAt: index)
        }

        topToolbarSwipeNavigation.pagesScrollView?.isScrollEnabled = false
    }
    
    func configureDetailView() {
        infoViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileInfoViewController") as! FBProfileInfoViewController
        infoViewController.profileMainViewController = self
        
        formulaViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileFormulasViewController") as! FBProfileFormulasViewController
        formulaViewController.profileMainViewController = self  
        
        moreViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileMoreViewController") as! FBProfileMoreViewController
        moreViewController.profileMainViewController = self
        
        textsViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileTextsViewController") as! FBProfileTextsViewController
        textsViewController.profileMainViewController = self
        
        notesViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileNotesViewController") as! FBProfileNotesViewController
        notesViewController.profileMainViewController = self
        
        viewControllers.append(contentsOf: [infoViewController, formulaViewController, moreViewController, textsViewController, notesViewController])
        
        
        guard profileViewType != .createHerb else {
            self.herb = FBHerb(name: "", id: "", favorite: false, readOnly: false, pinyin: "", pinyinCode: "", simplifiedChinese: "", traditionalChinese: "", preparation: "", englishCommons: [], latinNames: [], sourceTextEnglish: "", sourceTextChinese: "", species: [], flavours: [], natures: [], channels: [], notes: [], alternateHerbs: [], preparations: [])
            return
        }

        guard profileViewType != .createFormula else {
            self.formula = FBFormula(name: "", id: "", readOnly: false, favorite: false, simplifiedChinese: "", traditionalChinese: "", sourceTextEnglish: "", sourceTextChinese: "", textDate: "", author: "", pinyinCode: "", pinyinTon: "", herbs: [], alternateHerbs: [], notes: [], species: [], flavours: [], natures: [], channels: [])
            return
        }
    }
    
    func updateFavorite() {
        if (isfavoriteUpdated && profileViewType == .view) {
            if (herb != nil) {
                let request = FBProfile.CreateUpdateHerb.Request(herb: herb!, saveType: .update)
                output.saveHerb(request: request) { (error) in
                    if (error != nil) {
                        FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                    }
                }
                
            } else if (formula != nil){
                let request = FBProfile.CreateUpdateFormula.Request(formula: formula!, saveType: .update)
                output.saveFormula(request: request) { (error) in
                    if (error != nil) {
                        FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                    }
                }
            }
            
            isfavoriteUpdated = false
        }
    }
}

// MARK: Action Handler
extension FBProfileViewController {
    func backButtonTapped() {
        if (self.navigationController != nil) {
            self.navigationController!.popViewController(animated: true)
        } else {
            self.dismiss(animated: true, completion: nil)
        }
    }
    
    func reloadProfileViews() {
        configureNavigationBar()
        if (infoViewController != nil && infoViewController.tv != nil) {
            DispatchQueue.main.async {
                self.infoViewController.configureInfo()
                self.infoViewController.tCell = nil
                self.infoViewController.tv.reloadData()
                self.infoViewController.view.endEditing(true)
            }
        }
        
        if (formulaViewController != nil && formulaViewController.tableView != nil) {
            DispatchQueue.main.async {
                self.formulaViewController.tableView.reloadData()
            }
        }
        
        if (moreViewController != nil && moreViewController.tv != nil) {
            DispatchQueue.main.async {
                self.moreViewController.tv.reloadData()
            }
        }
        
        if (textsViewController != nil && textsViewController.tv != nil) {
            DispatchQueue.main.async {
                self.textsViewController.tv.reloadData()
            }
        }
        
        if (notesViewController != nil && notesViewController.tv != nil) {
            DispatchQueue.main.async {
                self.notesViewController.tv.reloadData()
            }
        }
    }
}

// MARK: FBProfileViewController Handlers 
extension FBProfileViewController {
    @IBAction func editBarButtonClicked(_ sender: UIBarButtonItem) {
        self.profileViewType = self.herb != nil ? .updateHerb : .updateFormula
        self.reloadProfileViews()
    }
    
    @IBAction func rightBarButtonClicked(_ sender: UIBarButtonItem) {
        
        if (profileViewType == .view) {
            let favoriteBtn = favoriteBarBtn?.customView as! UIButton
            isfavoriteUpdated = !isfavoriteUpdated
            if (herb != nil) {
                herb!.favorite = !(herb!.favorite)
                favoriteBtn.setImage(UIImage(named: herb!.favorite ? "favorite_selected" : "favorite"), for: .normal)
            } else if (formula != nil){
                formula!.favorite = !(formula!.favorite)
                favoriteBtn.setImage(UIImage(named: formula!.favorite ? "favorite_selected" : "favorite"), for: .normal)
            }
        } else {
            
            let name = infoViewController.txtName.text!
            let latinName = infoViewController.txtDescriptionLatin.text!
            let description = infoViewController.txtDescription.text!
            let chinesenames = infoViewController.txtChineseName.text!
            let chinesenamesTraditional = infoViewController.txtChineseNameTraditional.text!
            let pinyinTon = infoViewController.txtAddTones.text!
            let flavours = infoViewController.saveFlavours
            let natures = infoViewController.saveNatures
            
            guard name.characters.count > 0 else {
                FBAlertHandler.shared.showAlert(with: self, text: "Please specify the name.")
                return
            }
            
            if (herb != nil) {
                herb?.name = name
                herb?.latinNames = [latinName]
                herb?.englishCommons = [description]
                herb?.simplifiedChinese = chinesenames
                herb?.traditionalChinese = chinesenamesTraditional
                herb?.flavours = flavours
                herb?.natures = natures
                
                var preparations: [FBPreparation] = []
                if let moreVC = self.moreViewController {
                    if self.topToolbarSwipeNavigation.currentTabIndex == 2
                    {
                        moreVC.savePreparations()
                    }
                    for displayPreparation in moreVC.preparations
                    {
                        let item = FBPreparation(id: displayPreparation.id, name: displayPreparation.name, content: displayPreparation.content)
                        preparations.append(item)
                    }
                }
                self.herb?.preparations = preparations
                
                var alternateHerbs: [FBAlternateHerb] = []
                if self.topToolbarSwipeNavigation.currentTabIndex == 0 {
                    self.infoViewController.saveAlternateNames()
                }
                
                for item in self.newAlternateNames {
                    let alternateItem = FBAlternateHerb(name: item.name, id: item.id, readOnly: item.readOnly, herbName: (self.herb?.name)!, herbID: self.herb?.id, pinyin: "", pinyinCode: "", simplifiedChinese: item.simplifiedChinese, traditionalChinese: item.traditionalChinese, preparation: item.preparation, englishCommons: [], latinNames: [], sourceTextEnglish: "", sourceTextChinese: "", species: [], flavours: [], natures: [], channels: [], notes: [])
                    alternateHerbs.append(alternateItem)
                }
                self.herb?.alternateHerbs = alternateHerbs
                
                if (self.profileViewType == .createHerb) {
                    store.searchHerb(keyword: name, completionHandler: { (results) in
                        for result in results {
                            if (result.name == name) {
                                FBAlertHandler.shared.showAlert(with: self, text: "A Herb already exists with that name, please pick another.")
                                return
                            }
                        }
                        
                        let request = FBProfile.CreateUpdateHerb.Request(herb: self.herb!, saveType: .create)
                        self.output.saveHerb(request: request) { (error) in
                            if (error != nil) {
                                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                            } else {
                                FBAlertHandler.shared.showAlert(with: self, text: "The herb is saved successfully.")
                                self.profileViewType = .view
                                self.reloadProfileViews()
                            }
                        }
                    })
                } else {
                    let request = FBProfile.CreateUpdateHerb.Request(herb: self.herb!, saveType: .update)
                    self.output.saveHerb(request: request) { (error) in
                        if (error != nil) {
                            FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                        } else {
                            FBAlertHandler.shared.showAlert(with: self, text: "The herb is saved successfully.")
                            self.profileViewType = .view
                            self.reloadProfileViews()
                        }
                    }
                }
                
            } else if (formula != nil) {
                
                self.formula?.name = name
                self.formula?.sourceTextEnglish = description
                self.formula?.simplifiedChinese = chinesenames
                self.formula?.traditionalChinese = chinesenamesTraditional
                self.formula?.pinyinTon = pinyinTon
                
                if (self.profileViewType == .createFormula) {
                    store.searchFormula(keyword: name, completionHandler: { (results) in
                        for result in results {
                            if (result.name == name) {
                                FBAlertHandler.shared.showAlert(with: self, text: "A Formula already exists with that name, please pick another.")
                                return
                            }
                        }
                        
                        let request = FBProfile.CreateUpdateFormula.Request(formula: self.formula!, saveType: .create)
                        self.output.saveFormula(request: request) { (error) in
                            if (error != nil) {
                                FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                            } else {
                                FBSaveToFormulaHelper.shared.clearSavedHerbIDs()
                                FBAlertHandler.shared.showAlert(with: self, text: "The formula is saved successfully.")
                                self.profileViewType = .view
                                self.reloadProfileViews()
                            }
                        }
                    })
                } else {
                    let request = FBProfile.CreateUpdateFormula.Request(formula: self.formula!, saveType: .update)
                    self.output.saveFormula(request: request) { (error) in
                        if (error != nil) {
                            FBAlertHandler.shared.showAlert(with: self, text: error!.localizedDescription)
                        } else {
                            FBSaveToFormulaHelper.shared.clearSavedHerbIDs()
                            FBAlertHandler.shared.showAlert(with: self, text: "The formula is saved successfully.")
                            self.profileViewType = .view
                            self.reloadProfileViews()
                        }
                    }
                }
            }
            
        }
    }
}

// MARK: FBProfileViewControllerInput
extension FBProfileViewController: FBProfileViewControllerInput {
    func displayFormulas(viewModel: FBProfile.CreateUpdateFormula.ViewModel) {
        
    }
    
    func displayHerbs(viewModel: FBProfile.CreateUpdateHerb.ViewModel) {
        
    }
}

// MARK: CarbonTabSwipeNavigationDelegate
extension FBProfileViewController : CarbonTabSwipeNavigationDelegate {
    func carbonTabSwipeNavigation(_ carbonTabSwipeNavigation: CarbonTabSwipeNavigation, viewControllerAt index: UInt) -> UIViewController {
        return viewControllers[Int(index)]
    }
    
    func carbonTabSwipeNavigation(_ carbonTabSwipeNavigation: CarbonTabSwipeNavigation, willMoveAt index: UInt) {
        if carbonTabSwipeNavigation.currentTabIndex == 0 && (self.profileViewType == .createHerb || self.profileViewType == .updateHerb) {
            self.infoViewController.saveAlternateNames()
        }
        
        if carbonTabSwipeNavigation.currentTabIndex == 2 && (self.profileViewType == .createHerb || self.profileViewType == .updateHerb) {
            self.moreViewController.savePreparations()
        }
    }
}
