//
//  FBProfileFormulasViewController.swift
//  FormulaBuilderCS
//
//  Created by a on 2/19/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FZAccordionTableView
import FormulaBuilderCore
import MGSwipeTableCell

protocol FBProfileFormulasViewControllerInput
{
    func displayFetchedFormulas(viewModel: FBProfileFormulas.FetchFormulas.ViewModel)
}

protocol FBProfileFormulasViewControllerOutput
{
    func fetchFormulas(request: FBProfileFormulas.FetchFormulas.Request, herbID: String)
}


class FBProfileFormulasViewController: FBProfileBaseViewController {
    var output: FBProfileFormulasViewControllerOutput!
    var router: FBProfileFormulasRouter!
    
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var addBtn: UIButton!
    
    var formulas: [DisplayedFormula] = []
    var herbs: [DisplayedHerb] = []
    var displayedHerbs = [DisplayedHerb]()
  
    override func awakeFromNib() {
        super.awakeFromNib()
        FBProfileFormulasConfigurator.sharedInstance.configure(viewController: self)
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureTableView()
        setupVCTitle()
        setupEditMode()
        
        self.tableView.backgroundColor = FBColor.hexColor_F7F7F7()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if (profileMainViewController?.herb != nil) {
            let h = profileMainViewController?.herb
            fetchFormulas(herbID: h!.id)
        } else if (profileMainViewController?.formula != nil){
            if (profileMainViewController?.addToFormulaHerbs != nil) {
                herbs = profileMainViewController!.addToFormulaHerbs!
            } else {
                herbs.removeAll()
                let selectedFormula : FBFormula = (profileMainViewController?.formula)!
                for h in selectedFormula.herbs {
                    herbs.append(DisplayedHerb(with: h))
                }
            }
        }
        refreshUI()
    }

    func fetchFormulas(herbID: String) {       
        let request = FBProfileFormulas.FetchFormulas.Request()
        output.fetchFormulas(request: request, herbID: herbID)
    }
    
    fileprivate func configureTableView() {
        tableView.register(UINib(nibName: kCell, bundle: nil), forCellReuseIdentifier: kCell)
        tableView.tableFooterView = UIView(frame: CGRect.zero)
    }
    
    fileprivate func refreshUI() {
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    fileprivate func setupVCTitle() {
        lblTitle.text = profileMainViewController?.herb != nil ? "Formulas" : "Containing Herbs"
    }
    
    fileprivate func setupEditMode() {
        guard profileMainViewController?.profileViewType != .createFormula else {
            addBtn.isHidden = false
            return
        }
        
        guard profileMainViewController?.profileViewType != .updateFormula else {
            addBtn.isHidden = false
            return
        }
        
        addBtn.isHidden = false
    }
    
    func addHerbsToFormula(selectedHerbs : [DisplayedHerb]) {
        herbs.append(contentsOf: selectedHerbs)
    }
    
    @IBAction func addBtnTapped(_ sender: Any) {
        let herbSearchViewController = mainStoryboard.instantiateViewController(withIdentifier: "FBHerbSearchViewController") as! FBHerbSearchViewController
        herbSearchViewController.output.profileFormulaViewController = self
        profileMainViewController?.navigationController?.pushViewController(herbSearchViewController, animated: true)
        
    }
}

// MARK: FBProfileFormulasViewControllerInput
extension FBProfileFormulasViewController : FBProfileFormulasViewControllerInput {
    func displayFetchedFormulas(viewModel: FBProfileFormulas.FetchFormulas.ViewModel) {
        formulas = viewModel.displayedFormulas
        refreshUI()
    }
}

// MARK: UITableViewDelegate
extension FBProfileFormulasViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return profileMainViewController?.herb == nil ? herbs.count : formulas.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: kCell) as! FBCell
        
        cell.cellDelegate = self
        if (profileMainViewController?.herb == nil) {
            let herb = herbs[indexPath.row]
            cell.configure(herb: herb)
            
        } else {
            let formula = formulas[indexPath.row]
            cell.configure(formula: formula)
        }
        
        cell.accessoryType = .disclosureIndicator
        cell.selectionStyle = .none
        cell.contentView.backgroundColor = UIColor.white
        
        cell.numberLabel.isHidden = true
        cell.eyeButton.isHidden = true
        cell.lockButton.isHidden = true
        cell.addButton.isHidden = true
        
        cell.nameLabelLeadingToContentView.constant = 8
        cell.nameLabel.textColor = FBColor.hexColor_63A020()
        
        if (profileMainViewController?.profileViewType != .view && profileMainViewController?.formula != nil) {
            //// Trash
            let trashBtn = MGSwipeButton(title: "", icon: UIImage(named: "trash"), backgroundColor: FBColor.hexColor_FE3824())
            
            trashBtn.callback = { (cell) -> Bool in
                if (self.profileMainViewController?.herb == nil) {
                    self.herbs.remove(at: indexPath.row)
                } else {
                    self.formulas.remove(at: indexPath.row)
                }
                tableView.deleteRows(at: [indexPath], with: .fade)
                return true
            }
            
            trashBtn.centerIconOverText()
            cell.rightButtons = [trashBtn]
            
            //// Add to Formula
            let herb = herbs[indexPath.row]
            let wrapper = ActionCell()
            wrapper.delegate = self
            wrapper.animationStyle = .ladder
            wrapper.wrap(cell: cell,
                         actionsLeft: [
                            {
                                let action = IconAction(action: String(herb.id))
                                action.icon.image = #imageLiteral(resourceName: "add").withRenderingMode(.alwaysTemplate)
                                action.icon.tintColor = UIColor.white
                                action.backgroundColor = UIColor(red:99/255, green:160/255, blue:32/255, alpha:1.00)
                                return action
                            }()
                        ])
        }
        
        cell.contentView.backgroundColor = UIColor.white
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 55.0;//Choose your custom row height
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        if (profileMainViewController?.herb == nil) {
            let herb = herbs[indexPath.row]
            
            let profileViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileViewController") as! FBProfileViewController
            profileViewController.profileViewType = .view
            profileViewController.herb = herb.herbObj
            self.navigationController?.pushViewController(profileViewController, animated: true)
        } else {
            let formula = formulas[indexPath.row]
            
            let profileViewController = profileStoryboard.instantiateViewController(withIdentifier: "FBProfileViewController") as! FBProfileViewController
            profileViewController.profileViewType = .view
            profileViewController.formula = formula.formulaObj
            self.navigationController?.pushViewController(profileViewController, animated: true)
        }

    }
}

// MARK: ActionCellDelegate
extension FBProfileFormulasViewController: ActionCellDelegate {
    public func didActionTriggered(cell: UITableViewCell, action: String) {
        FBSaveToFormulaHelper.shared.addHerbID(action)
    }
}

// MARK: FBCellDelegate
extension FBProfileFormulasViewController: FBCellDelegate {
    func addHerbToMyFormula(herb: DisplayedHerb?) {}
    
    func lockStatusChanged(herb: DisplayedHerb?, formula: DisplayedFormula?) {}
    
    func addFormulaToCompare(_ formula: DisplayedFormula) {}
    
    func addHerbToCompare(_ herb: DisplayedHerb) {}
    
    func favoriteStatusChanged(herb: DisplayedHerb?, formula: DisplayedFormula?) {
        if (herb != nil) {
            FBCoreWorker.shared.favoriteStatusChanged(with: herb!.id, type: "Herb")
        } else {
            FBCoreWorker.shared.favoriteStatusChanged(with: formula!.id, type: "Formula")
        }
    }
}
