//
//  FBProfileInfoInteractor.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/11/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FormulaBuilderCore

protocol FBProfileInfoInteractorInput {
    func fetchHerb(request: FBProfileInfo.Object.RequestHerb)
    func fetchFlavours(request: FBProfileInfo.Object.Request)
    func fetchNatures(request: FBProfileInfo.Object.Request)
    var herbs: [FBHerb]? { get }
    var flavours: [String]? { get }
    var natures: [String]? { get }
}

protocol FBProfileInfoInteractorOutput {
    func presentHerbs(response: FBProfileInfo.Object.Response)
    func presentFlavours(response: FBProfileInfo.Object.ResponseFlavours)
    func presentNatures(response: FBProfileInfo.Object.ResponseNatures)
}

////// FBProfileInfoInteractorInput
class FBProfileInfoInteractor : FBProfileInfoInteractorInput {
    var herbs: [FBHerb]?
    var flavours: [String]?
    var natures: [String]?
    
    var output: FBProfileInfoInteractorOutput!
    var worker: FBProfileInfoWorker!
 
    func fetchHerb(request: FBProfileInfo.Object.RequestHerb) {
        worker = FBProfileInfoWorker()
        worker.doSomeWork()
        
        let herb = request.herb
        if herb.latinNames.count > 0
        {
            let latinName = herb.latinNames[0]
            store.fetchHerbs(withFilter: .all){ (herbs) in
                self.herbs = herbs
                let preparedFormHerbs = self.filterHerbs(name: latinName)
                let response = FBProfileInfo.Object.Response(prepareFormHerbs: preparedFormHerbs)
                self.output.presentHerbs(response: response)
            }
        }
        
    }
    
    func fetchFlavours(request: FBProfileInfo.Object.Request) {
        worker = FBProfileInfoWorker()
        worker.doSomeWork()
        
        FBCoreWorker.shared.getFlavour { (flavours) in
            self.flavours = flavours
            if self.flavours == nil {
                self.flavours = []
            }
            
            let response = FBProfileInfo.Object.ResponseFlavours(flavours: self.flavours!)
            self.output.presentFlavours(response: response)
        }
    }
    
    func fetchNatures(request: FBProfileInfo.Object.Request) {
        worker = FBProfileInfoWorker()
        worker.doSomeWork()
        
        FBCoreWorker.shared.getNatures { (natures) in
            self.natures = natures
            if self.natures == nil {
                self.natures = []
            }
            let response = FBProfileInfo.Object.ResponseNatures(natures: self.natures!)
            self.output.presentNatures(response: response)
        }
    }
}

///// Action Helper
extension FBProfileInfoInteractor {
    
    func filterHerbs(name: String) -> [FBHerb] {
        var filteredHerbs = herbs?.filter({ (herb) -> Bool in
            if name == herb.name {
                return true
            }
            return false
        })
        
        if filteredHerbs == nil {
            filteredHerbs = []
        }
        
        return filteredHerbs!
    }
}
