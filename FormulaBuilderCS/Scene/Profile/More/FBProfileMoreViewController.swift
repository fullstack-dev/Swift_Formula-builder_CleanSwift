//
//  FBProfileMoreViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/11/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FZAccordionTableView
import FormulaBuilderCore

protocol FBProfileMoreViewControllerInput
{
    func displaySomething(viewModel: FBProfileMore.Something.ViewModel)
}

protocol FBProfileMoreViewControllerOutput
{
    func doSomething(request: FBProfileMore.Something.Request)
}

class FBProfileMoreViewController: FBProfileBaseViewController, FBProfileMoreViewControllerInput
{
    var output: FBProfileMoreViewControllerOutput!
    var router: FBProfileMoreRouter!
    
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var tv: FZAccordionTableView!
    
    var tvDataSource: [String: [(String, String)]]?
    var sectionLabels : [String]?
    var preparations: [DisplayPreparation] = []
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        FBProfileMoreConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        configureTableView()
        setupVCTitle()
        doSomethingOnLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:NSNotification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:NSNotification.Name.UIKeyboardWillHide, object: nil)
    }
    
    func doSomethingOnLoad()
    {
        
        let request = FBProfileMore.Something.Request()
        output.doSomething(request: request)
    }
    
    func displaySomething(viewModel: FBProfileMore.Something.ViewModel)
    {
        
    }
    
    func savePreparations()
    {
        if preparations.count == 0
        {
            return
        }
        var index = (profileMainViewController?.newAlternateNames.count)!
        for prep in self.preparations
        {
            let indexPath = IndexPath(item: index, section: 0)
            if let cell = tv.cellForRow(at: indexPath) as? FBPreparationEditCell
            {
                if index < (profileMainViewController?.newAlternateNames.count)!
                {
                    
                }else{
                    if cell.methodNameTxt.text == ""
                    {
                        
                        return
                    }
                    let preparation = FBPreparation(id: prep.id, name: cell.methodNameTxt.text, content: cell.contentText.text)
                    self.preparations[index - (profileMainViewController?.newAlternateNames.count)!] = DisplayPreparation(with: preparation)
                }
            }
            index += 1
        }
    }
    
    func configureTableView() {
        tv.allowMultipleSectionsOpen = true
        tv.register(UINib(nibName: FBProfileAccordionViewTableHeaderView.kAccordionHeaderViewReuseIdentifier, bundle: nil), forHeaderFooterViewReuseIdentifier: FBProfileAccordionViewTableHeaderView.kAccordionHeaderViewReuseIdentifier)
        tv.register(UINib(nibName: kTextCell, bundle: nil), forCellReuseIdentifier: kTextCell)
        tv.register(UINib(nibName: kPreparationCell, bundle: nil), forCellReuseIdentifier: kPreparationCell)
        tv.register(UINib(nibName: kPreparationEditCell, bundle: nil), forCellReuseIdentifier: kPreparationEditCell)
        tv.register(UINib(nibName: kAddAlternateCell, bundle: nil), forCellReuseIdentifier: kAddAlternateCell)
        if let herb = profileMainViewController?.herb
        {
            if let _ = herb.preparation
            {
                for preparation in herb.preparations
                {
                    self.preparations.append(DisplayPreparation(with: preparation))
                }
            }
        }
        if (profileMainViewController?.herb != nil) {
            sectionLabels = ["Preparation Method", "Cautions", "Species", "Cultivation"]
            tvDataSource = [
                "Preparation Method": [
                    ("1st Method", "Preparation Text"),
                    ("1st Method", "Preparation Text")
                ],
                "Cautions": [],
                "Species": [],
                "Cultivation": []
            ]
        } else {
            sectionLabels = ["1st Method", "2nd Method", "Plant Species", "Cautions", "Cultivation"]
            tvDataSource = [
                "1st Method": [
                    ("Begin by Soaking Herbs...", "")
                ],
                "2nd Method": [
                    ("Begin by Soaking Herbs...", "")
                ],
                "Plant Species": [
                    ("Tiger", ""),
                    ("Grey Wolf", "")
                ],
                "Cautions": [],
                "Cultivation": []
            ]
        }
    }
    
    func keyboardWillShow(notification: NSNotification) {
        
        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y == 0{
                self.view.frame.origin.y -= keyboardSize.height / 4
            }
            tv.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardSize.height, right: 0)
        }
    }
    
    func keyboardWillHide(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y != 0{
                self.view.frame.origin.y += keyboardSize.height / 4
            }
            tv.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        }
    }
    // add preparation cell delegate method.
    func addPreparation(indexpath: IndexPath)
    {
        let displayPreparation = DisplayPreparation()
        self.preparations.append(displayPreparation)
        tv.reloadData()
    }
    
    //FBPreparedExpandCell delegate method.
    func expandCell(indexPath: IndexPath, alternateHerb: DisplayedAlternateHerb)
    {
        profileMainViewController?.newAlternateNames[indexPath.row] = alternateHerb
        tv.beginUpdates()
        tv.reloadRows(at: [indexPath], with: .automatic)
        tv.endUpdates()
    }
    
    func expandPreparationCell(indexPath: IndexPath, preparation: DisplayPreparation)
    {
        let indexValue = indexPath.row - (profileMainViewController?.newAlternateNames.count)!
        self.preparations[indexValue] = preparation
        tv.beginUpdates()
        tv.reloadRows(at: [indexPath], with: .automatic)
        tv.endUpdates()
    }
    
    fileprivate func setupVCTitle() {
        lblTitle.text = profileMainViewController?.herb != nil ? "More Information" : "Preparation Instruction"
    }
    
    //FBPreparationCell Delegate
    func addPreparationToAlternateHerb(indexPath: IndexPath, alternateHerb: DisplayedAlternateHerb)
    {
        profileMainViewController?.newAlternateNames[indexPath.row] = alternateHerb
    }
}

// MARK: UITableViewDelegate, UITableViewDataSource
extension FBProfileMoreViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let sectionTitle = sectionLabels![section]
        
        if profileMainViewController?.herb != nil
        {
            if section == 0
            {
                if profileMainViewController?.profileViewType == .view
                {
                    return (profileMainViewController?.newAlternateNames.count)! + self.preparations.count
                } else {
                    return (profileMainViewController?.newAlternateNames.count)! + self.preparations.count + 1
                }
            }
        } else {
            if profileMainViewController?.profileViewType == .view {
                return tvDataSource![sectionTitle]!.count
            } else {
                return 0
            }
        }
        return tvDataSource![sectionTitle]!.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return sectionLabels != nil ? sectionLabels!.count : 0
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if profileMainViewController?.profileViewType != .view
        {
            if profileMainViewController?.herb != nil {
                if (profileMainViewController?.newAlternateNames.count)! + self.preparations.count != indexPath.row
                {
                    if indexPath.section == 0
                    {
                        var selectedFlag = false
                        if indexPath.row < (profileMainViewController?.newAlternateNames.count)!
                        {
                            selectedFlag = (profileMainViewController?.newAlternateNames[indexPath.row].isSelected)!
                        }else{
                            let indexValue = indexPath.row - (profileMainViewController?.newAlternateNames.count)!
                            selectedFlag = self.preparations[indexValue].isSelected
                        }
                        if !selectedFlag
                        {
                            return 44
                        }else
                        {
                            return 107
                        }
                        
                    }else{
                        return 44
                    }
                }
            } else {
                return 44
            }
        }
        return UITableViewAutomaticDimension
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return FBProfileAccordionViewTableHeaderView.kDefaultAccordionHeaderViewHeight
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return self.tableView(tableView, heightForRowAt: indexPath)
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForHeaderInSection section: Int) -> CGFloat {
        return self.tableView(tableView, heightForHeaderInSection:section)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var resCell : UITableViewCell?
        let row = indexPath.row
        if indexPath.section == 0 && profileMainViewController?.herb != nil
        {
            if profileMainViewController?.profileViewType == .view
            {
                let cell = tableView.dequeueReusableCell(withIdentifier: kPreparationCell, for: indexPath) as! FBPreparationCell
                if (profileMainViewController?.herb != nil) {
                    if indexPath.row < (profileMainViewController?.newAlternateNames.count)!
                    {
                        cell.configureCell(alternateHerb: (profileMainViewController?.newAlternateNames[row])!, profileViewType: (profileMainViewController?.profileViewType)!, indexPath: indexPath)
                        cell.parentViewController = self
                        resCell = cell
                    }else{
                        let indexValue = indexPath.row - (profileMainViewController?.newAlternateNames.count)!
                        cell.configureMoreCell(preparation: self.preparations[indexValue], profileViewType: (profileMainViewController?.profileViewType)!, indexPath: indexPath)
                        resCell = cell
                    }
                    
                }
            } else {
                if indexPath.row == (profileMainViewController?.newAlternateNames.count)! + self.preparations.count
                {
                    let cell = tableView.dequeueReusableCell(withIdentifier: kAddAlternateCell, for: indexPath) as! FBAddAlternateCell
                    cell.titleLbl.text = "Add new method"
                    cell.vcdelegate = self
                    resCell = cell
                } else {
                    if indexPath.row < (profileMainViewController?.newAlternateNames.count)!
                    {
                        let cell = tableView.dequeueReusableCell(withIdentifier: kPreparationEditCell, for: indexPath) as! FBPreparationEditCell
                        if (profileMainViewController?.herb != nil) {
                            cell.configureCell(alternateHerb: (profileMainViewController?.newAlternateNames[row])!, profileViewType: (profileMainViewController?.profileViewType)!, indexPath: indexPath)
                            cell.parentViewController = self
                            resCell = cell
                        }
                    } else {
                        let cell = tableView.dequeueReusableCell(withIdentifier: kPreparationEditCell, for: indexPath) as! FBPreparationEditCell
                        if (profileMainViewController?.herb != nil) {
                            let indexValue = indexPath.row - (profileMainViewController?.newAlternateNames.count)!
                            cell.configureMoreCell(preparation: self.preparations[indexValue], profileViewType: (profileMainViewController?.profileViewType)!, indexPath: indexPath)
                            cell.parentViewController = self
                            resCell = cell
                            
                        }
                    }
                    
                }
            }
            
        } else {
            let s = sectionLabels![indexPath.section]
            let cell = tableView.dequeueReusableCell(withIdentifier: kTextCell, for: indexPath) as! FBTextCell
            cell.configureMoreCell(indexPath: indexPath,
                                   strTitle: tvDataSource![s]![row].0,
                                   strSubTitle: tvDataSource![s]![row].1,
                                   strPlaceholder: "Add \(row+1)th method",
                                   profileType: profileMainViewController!.profileViewType)
            resCell = cell
        }
        return resCell!
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let accordionView = tableView.dequeueReusableHeaderFooterView(withIdentifier: FBProfileAccordionViewTableHeaderView.kAccordionHeaderViewReuseIdentifier) as! FBProfileAccordionViewTableHeaderView
        accordionView.configureAccordionView(title: sectionLabels![section], isEnabled: self.tableView(tableView, numberOfRowsInSection: section) > 0)
        return accordionView
    }
}

// MARK: FZAccordionTableViewDelegate
extension FBProfileMoreViewController : FZAccordionTableViewDelegate {
    func tableView(_ tableView: FZAccordionTableView, willOpenSection section: Int, withHeader header: UITableViewHeaderFooterView?) {
        
    }
    
    func tableView(_ tableView: FZAccordionTableView, didOpenSection section: Int, withHeader header: UITableViewHeaderFooterView?) {
        let accordionView = header as! FBProfileAccordionViewTableHeaderView
        accordionView.disclosure_Icon.image = UIImage(named: "arrow_up")
    }
    
    func tableView(_ tableView: FZAccordionTableView, willCloseSection section: Int, withHeader header: UITableViewHeaderFooterView?) {
        
    }
    
    func tableView(_ tableView: FZAccordionTableView, didCloseSection section: Int, withHeader header: UITableViewHeaderFooterView?) {
        let accordionView = header as! FBProfileAccordionViewTableHeaderView
        accordionView.disclosure_Icon.image = UIImage(named: "arrow_down")
    }
    
    func tableView(_ tableView: FZAccordionTableView, canInteractWithHeaderAtSection section: Int) -> Bool {
        return true
    }
}
