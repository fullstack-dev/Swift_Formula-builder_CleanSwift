//
//  FBRecentSearchesViewController.swift
//  FormulaBuilderCS
//
//  Created by PFIdev on 2/10/17.
//  Copyright (c) 2017 orgname. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol FBRecentSearchesViewControllerInput
{
  func displaySomething(viewModel: FBRecentSearches.Something.ViewModel)
}

protocol FBRecentSearchesViewControllerOutput
{
  func doSomething(request: FBRecentSearches.Something.Request)
    var herbSearchViewController: FBHerbSearchViewController! { get set }
    var formulaSearchViewController: FBFormulaSearchViewController! { get set }
}

class FBRecentSearchesViewController: UIViewController, FBRecentSearchesViewControllerInput
{
    var output: FBRecentSearchesViewControllerOutput!
    var router: FBRecentSearchesRouter!

    fileprivate var formulaSearchViewHeader: UIView!
    fileprivate var formulaSearchViewMaxTop = -((UIScreen.main.bounds.size.height - 64) / 2 - kSearchViewHeaderHeigth) // formula search view's maxium top constant
    
    fileprivate var landscape = false
    fileprivate var isMenuViewHidden = true
    var filter = FetchFilter.all
    
    @IBOutlet weak var formulaSearchViewTop: NSLayoutConstraint!
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var herbSearchView: UIView!
    @IBOutlet weak var formulaSearchView: UIView!
    
    @IBOutlet var portraitConstraints: [NSLayoutConstraint]!
    @IBOutlet var landscapeConstraintsFormulaViewRight: [NSLayoutConstraint]!
    @IBOutlet var landscapeConstraintsFormulaViewLeft: [NSLayoutConstraint]!

    override func awakeFromNib()
    {
        super.awakeFromNib()
        FBRecentSearchesConfigurator.sharedInstance.configure(viewController: self)
    }

    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomethingOnLoad()
    }

    func doSomethingOnLoad()
    {
        let request = FBRecentSearches.Something.Request()
        output.doSomething(request: request)
    }

    func displaySomething(viewModel: FBRecentSearches.Something.ViewModel)
    {

    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        
        coordinator.animate(alongsideTransition: { context in
            
            if UIDevice.current.orientation.isLandscape { // landscape mode
                self.contentView.removeConstraints(self.portraitConstraints)
                self.contentView.addConstraints(self.landscapeConstraintsFormulaViewRight)
                
            } else { // portrait mode
                self.contentView.removeConstraints(self.landscapeConstraintsFormulaViewRight)
                self.contentView.addConstraints(self.portraitConstraints)
            }
        }, completion: nil)
    }
    
    func fetchHerbsAndFormulas() {
        output.formulaSearchViewController.fetchFormulas()
        output.herbSearchViewController.fetchHerbs()
    }
    
    func changeFilter(_ filter: FetchFilter) {
        
        if self.filter != filter {
            self.filter = filter
            
            output.formulaSearchViewController.refereshUIWithFilter(filter)
            output.herbSearchViewController.refereshUIWithFilter(filter)
        }
    }
    
    // MARK: Search Button Clicked
    
    func searchForHerb(_ yes: Bool, _ completion: @escaping () -> Swift.Void) {
        if yes {
            output.formulaSearchViewController.searchingHerb()
            formulaSearchViewTop.constant = -formulaSearchViewMaxTop
        } else {
            output.herbSearchViewController.searchingFormula()
            formulaSearchViewTop.constant = maxTop()
        }
        
        UIView.animate(withDuration: kDuration, animations: {
            self.view.layoutIfNeeded()
        }) { _ in
            completion()
        }
    }
    
    fileprivate func maxTop() -> CGFloat {
        var maxTop = formulaSearchViewMaxTop
        if output.herbSearchViewController.headerTop.constant != 0 {
            maxTop = formulaSearchViewMaxTop + kSearchViewHeaderHeigth
        }
        return maxTop
    }
    
    // MARK: Touchs Event
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        
    }
    
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        if let touch = touches.first {
            let currentLocation = touch.location(in: view)
            let previousLocation = touch.previousLocation(in: view)
            
            if touchedFormulaSearchView(touch.view!) {
                let yDifferent = currentLocation.y - previousLocation.y
                swipingFormulSearchView(yDifferent)
            } else {
                super.touchesMoved(touches, with: event)
            }
        }
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        if let touch = touches.first {
            // swiped formula search view
            if touchedFormulaSearchView(touch.view!) {
                //                swipeFormulaSearchViewEnded()
            } else { // swipe view
                super.touchesEnded(touches, with: event)
            }
        }
    }
    
    private func touchedFormulaSearchView(_ touchView: UIView) -> Bool {
        let formulaSearchViewControllerView = formulaSearchView.subviews.first!
        if formulaSearchViewControllerView.subviews.contains(touchView) {
            return true
        }
        return false
    }
    
    // swipe formula search view up or down
    private func swipingFormulSearchView(_ yDifferent: CGFloat) {
        let constant = formulaSearchViewTop.constant + yDifferent
        
        if constant <= maxTop() {
            formulaSearchViewTop.constant = maxTop()
        } else if constant >= -formulaSearchViewMaxTop {
            formulaSearchViewTop.constant = -formulaSearchViewMaxTop
        } else {
            formulaSearchViewTop.constant = constant
        }
    }
    
    private func swipeFormulaSearchViewEnded() {
        let space = view.frame.size.height / 3
        let y = formulaSearchView.frame.origin.y
        if y < space {
            formulaSearchViewTop.constant = formulaSearchViewMaxTop
        } else if y > space * 2 {
            formulaSearchViewTop.constant = -formulaSearchViewMaxTop
        } else {
            formulaSearchViewTop.constant = 0
        }
        
        UIView.animate(withDuration: kDuration) {
            self.view.layoutIfNeeded()
        }
    }
}
